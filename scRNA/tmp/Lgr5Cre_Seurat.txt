library(dplyr)
library(Seurat)
library(patchwork)
library(DoubletFinder)
library(data.table)
library(magrittr)
library(ggplot2)
library(cowplot)
library(stringr)
library(Signac)
library(SeuratWrappers)
library(monocle3)
library(Nebulosa)
library(BiocFileCache)
library(Matrix)
library(extrafont)
library(extrafont)
library(remotes)
#remotes::install_version("Rttf2pt1", version = "1.3.8")
#extrafont::font_import()


########################################################################################################################################################################################################################

set.seed(7)
# CREATE OBJECT Lgr5Cre_SETDB1KO

# Load dataset A (Object A)
Lgr5Cre_Setdb1KO_A.data=Read10X(data.dir = "/media/dimbo/10T/data/TAL_LAB/Analysis/scRNA/Talianidis_GFP_2_fixed/analysis/Cellranger/run_count_21L004866/outs/filtered_feature_bc_matrix/")
Lgr5Cre_Setdb1KO_A = CreateSeuratObject(counts = Lgr5Cre_Setdb1KO_A.data, project = "Setdb1KO A", min.cells = 3, min.features = 200)
# Load dataset B (Object B)
Lgr5Cre_Setdb1KO_B.data <- Read10X(data.dir = "/media/dimbo/10T/data/TAL_LAB/Analysis/scRNA/Talianidis_GFP_2_fixed/analysis/Cellranger/run_count_21L004870/outs/filtered_feature_bc_matrix/")
Lgr5Cre_Setdb1KO_B = CreateSeuratObject(counts = Lgr5Cre_Setdb1KO_B.data, project = "Setdb1KO B", min.cells = 3, min.features = 200)

# Merge objects
Lgr5Cre_Setdb1KO=merge(Lgr5Cre_Setdb1KO_A, y=Lgr5Cre_Setdb1KO_B, add.cell.ids=c("Rep_A","Rep_B"), project="Lgr5Cre_Setdb1KO")

##################################################################################################################################################################################################################

# CREATE OBJECT LGR5Cre_WT

# Load dataset A (Object A)
Lgr5Cre_WT_A.data=Read10X(data.dir = "/media/dimbo/10T/data/TAL_LAB/Analysis/scRNA/Talianidis_GFP_2_fixed/analysis/Cellranger/run_count_21L004858/outs/filtered_feature_bc_matrix/")
Lgr5Cre_WT_A = CreateSeuratObject(counts = Lgr5Cre_WT_A.data, project = "Lgr5Cre A", min.cells = 3, min.features = 200)
# Load dataset B (Object B)
Lgr5Cre_WT_B.data <- Read10X(data.dir = "/media/dimbo/10T/data/TAL_LAB/Analysis/scRNA/Talianidis_GFP_2_fixed/analysis/Cellranger/run_count_21L004862/outs/filtered_feature_bc_matrix/")
Lgr5Cre_WT_B = CreateSeuratObject(counts = Lgr5Cre_WT_B.data, project = "Lgr5Cre B", min.cells = 3, min.features = 200)

# Merge objects
Lgr5Cre_WT=merge(Lgr5Cre_WT_A, y=Lgr5Cre_WT_B, add.cell.ids=c("Rep_A","Rep_B"), project="Lgr5Cre_WT")

##################################################################################################################################################################################################################

#FIND DOUBLETS IN EACH CONDITION SEPARATELY

Lgr5Cre_Setdb1KO <- NormalizeData(Lgr5Cre_Setdb1KO, normalization.method = "LogNormalize", scale.factor = 10000)

Lgr5Cre_Setdb1KO <- FindVariableFeatures(Lgr5Cre_Setdb1KO, selection.method = "vst", nfeatures = 2000)

all.genes <- rownames(Lgr5Cre_Setdb1KO)
Lgr5Cre_Setdb1KO <- ScaleData(Lgr5Cre_Setdb1KO, features = all.genes)

Lgr5Cre_Setdb1KO <- RunPCA(Lgr5Cre_Setdb1KO, features = VariableFeatures(object = Lgr5Cre_Setdb1KO))

Lgr5Cre_Setdb1KO <- RunUMAP(Lgr5Cre_Setdb1KO, dims = 1:10)

nExp <- round(ncol(Lgr5Cre_Setdb1KO) * 0.069)
Lgr5Cre_Setdb1KO.filt <- doubletFinder_v3(Lgr5Cre_Setdb1KO, pN = 0.25, pK = 0.09, nExp = nExp, PCs = 1:10)

DF.name = colnames(Lgr5Cre_Setdb1KO.filt@meta.data)[grepl("DF.classification", colnames(Lgr5Cre_Setdb1KO.filt@meta.data))]

pdf("CowPlot_Setdb1KO.pdf", width=15, height=8)
cowplot::plot_grid(ncol = 2, DimPlot(Lgr5Cre_Setdb1KO.filt, group.by = DF.name) + NoAxes())
dev.off()

pdf("VlnPlot_Setdb1KO.pdf", width=15, height=8)
VlnPlot(Lgr5Cre_Setdb1KO.filt, features = "nFeature_RNA", group.by = DF.name, pt.size = 0.1)
dev.off()

Lgr5Cre_Setdb1KO.filt = Lgr5Cre_Setdb1KO.filt[, Lgr5Cre_Setdb1KO.filt@meta.data[, DF.name] == "Singlet"]


##################################################################################################################################################################################################################


Lgr5Cre_WT <- NormalizeData(Lgr5Cre_WT, normalization.method = "LogNormalize", scale.factor = 10000)

Lgr5Cre_WT <- FindVariableFeatures(Lgr5Cre_WT, selection.method = "vst", nfeatures = 2000)

all.genes <- rownames(Lgr5Cre_WT)
Lgr5Cre_WT <- ScaleData(Lgr5Cre_WT, features = all.genes)

Lgr5Cre_WT <- RunPCA(Lgr5Cre_WT, features = VariableFeatures(object = Lgr5Cre_WT))

Lgr5Cre_WT <- RunUMAP(Lgr5Cre_WT, dims = 1:10)

nExp <- round(ncol(Lgr5Cre_WT) * 0.057)
Lgr5Cre_WT.filt <- doubletFinder_v3(Lgr5Cre_WT, pN = 0.25, pK = 0.09, nExp = nExp, PCs = 1:10)

DF.name = colnames(Lgr5Cre_WT.filt@meta.data)[grepl("DF.classification", colnames(Lgr5Cre_WT.filt@meta.data))]

pdf("CowPlot_WT.pdf", width=15, height=8)
cowplot::plot_grid(ncol = 2, DimPlot(Lgr5Cre_WT.filt, group.by = DF.name) + NoAxes())
dev.off()

pdf("VlnPlot_WT.pdf", width=15, height=8)
VlnPlot(Lgr5Cre_WT.filt, features = "nFeature_RNA", group.by = DF.name, pt.size = 0.1)
dev.off()


##################################################################################################################################################################################################################


# Merge Setdb1KO with WT to new object Lgr5Cre_MERGED
Lgr5Cre_MERGED=merge(Lgr5Cre_Setdb1KO.filt, y=Lgr5Cre_WT.filt, add.cell.ids=c("Setdb1KO","Lgr5Cre"), project="Lgr5Cre_MERGED")

# Change replicates names within object. e.g(Setdb1KO_repA & Setdb1KO_repB -> Setdb1KO)
Lgr5Cre_MERGED$orig.ident=plyr::mapvalues(x=Lgr5Cre_MERGED$orig.ident, from = c("Setdb1KO A", "Setdb1KO B", "Lgr5Cre A", "Lgr5Cre B"), to = c("Setdb1KO", "Setdb1KO", "Lgr5Cre", "Lgr5Cre"))


##################################################################################################################################################################################################################


# QC and selecting cells
Lgr5Cre_MERGED[["percent.mt"]] <- PercentageFeatureSet(Lgr5Cre_MERGED, pattern = "^mt-")

# Violin Plot
pdf("violin_plot_Lgr5Cre.pdf", width=18, height=10)
VlnPlot(Lgr5Cre_MERGED, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)
dev.off()

# Violin Plot with merged replicates
pdf("violin_plot_Lgr5Cre_merged.pdf", width=18, height=10)
VlnPlot(Lgr5Cre_MERGED, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), group.by = "orig.ident", ncol = 3)
dev.off()

# Feature Scatter Plot
plot1 <- FeatureScatter(Lgr5Cre_MERGED, feature1 = "nCount_RNA", feature2 = "percent.mt")
plot2 <- FeatureScatter(Lgr5Cre_MERGED, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
pdf("feauture_scatter.pdf", width=15, height=8)
plot1 + plot2
dev.off()

# Feature Scatter Plot
plot1 <- FeatureScatter(Lgr5Cre_MERGED, feature1 = "nCount_RNA", feature2 = "percent.mt", group.by = "orig.ident")
plot2 <- FeatureScatter(Lgr5Cre_MERGED, feature1 = "nCount_RNA", feature2 = "nFeature_RNA", group.by = "orig.ident")
pdf("feauture_scatter_merged.pdf", width=15, height=8)
plot1 + plot2
dev.off()

# Filtering cells 
Lgr5Cre_MERGED <- subset(Lgr5Cre_MERGED, subset = nFeature_RNA > 200 & nFeature_RNA < 4000 & percent.mt < 5 & nCount_RNA < 25000)

# Normalize the data
Lgr5Cre_MERGED <- NormalizeData(Lgr5Cre_MERGED, normalization.method = "LogNormalize", scale.factor = 10000)

# Identification of highly variable features
Lgr5Cre_MERGED <- FindVariableFeatures(Lgr5Cre_MERGED, selection.method = "vst", nfeatures = 2000)

# Identify the 10 most highly variable genes
top10 <- head(VariableFeatures(Lgr5Cre_MERGED), 10)

top50 <- head(VariableFeatures(Lgr5Cre_MERGED), 50)
# Plot variable features
pdf("50variable_features_Lgr5Cre.pdf", width=8, height=)
plot1 <- VariableFeaturePlot(Lgr5Cre_MERGED)
plot2 <- LabelPoints(plot = plot1, points = top50, repel = TRUE)
plot2
dev.off()

# Scaling the data
all.genes <- rownames(Lgr5Cre_MERGED)
Lgr5Cre_MERGED <- ScaleData(Lgr5Cre_MERGED, features = all.genes)

# Performing linear dimensional reduction
Lgr5Cre_MERGED <- RunPCA(Lgr5Cre_MERGED, features = VariableFeatures(object = Lgr5Cre_MERGED))
print(Lgr5Cre_MERGED[["pca"]], dims = 1:5, nfeatures = 5)

# VizDim Plot
pdf("Viz_DimPlot_PCA_Lgr5Cre.pdf", width=15, height=8)
VizDimLoadings(Lgr5Cre_MERGED, dims = 1:2, reduction = "pca")
dev.off()

# DimPlot
pdf("DimPlot_PCA_Lgr5Cre.pdf", width=15, height=8)
VizDimLoadings(Lgr5Cre_MERGED, dims = 1:2, reduction = "pca")
dev.off()

# Dim Heatmap
pdf("DimHeatmap_Lgr5Cre.pdf", width=15, height=8)
DimHeatmap(Lgr5Cre_MERGED, dims = 1, cells = 500, balanced = TRUE)
dev.off()

pdf("DimHeatmap_Lgr5Cre_15.pdf", width=15, height=8)
DimHeatmap(Lgr5Cre_MERGED, dims = 1:15, cells = 500, balanced = TRUE)
dev.off()

# Determine the dimensionality of the dataset
Lgr5Cre_MERGED <- JackStraw(Lgr5Cre_MERGED, num.replicate = 100)
Lgr5Cre_MERGED <- ScoreJackStraw(Lgr5Cre_MERGED, dims = 1:20)

pdf("JackstrawPlot_Lgr5Cre.pdf", width=15, height=8)
JackStrawPlot(Lgr5Cre_MERGED, dims = 1:15)
dev.off()

pdf("ElbowPlot_Lgr5Cre.pdf", width=15, height=8)
ElbowPlot(Lgr5Cre_MERGED)
dev.off()

# Cluster the Cells
Lgr5Cre_MERGED <- FindNeighbors(Lgr5Cre_MERGED, dims = 1:10)
Lgr5Cre_MERGED <- FindClusters(Lgr5Cre_MERGED, resolution = 0.5)

# Run non linear dimensional reduction
reticulate::py_install(packages = 'umap-learn')
Lgr5Cre_MERGED <- RunUMAP(Lgr5Cre_MERGED, dims = 1:10)

# Umap plot
pdf("umapPlot_MERGED.pdf", width=10, height=8)
DimPlot(Lgr5Cre_MERGED, reduction = "umap")
dev.off()

# Umap plot merged
pdf("umapPlot_Lgr5Cre_merged.pdf", width=10, height=8)
DimPlot(Lgr5Cre_MERGED, reduction = "umap", group.by = "orig.ident", pt.size = 0.3)
dev.off()

# Split objects 
SplitObject(Lgr5Cre_MERGED, split.by = "ident")
n_cells=(FetchData(Lgr5Cre_MERGED, var=c("ident", "orig.ident")) %>% dplyr::count(ident, orig.ident) %>% tidyr::spread(ident, n))

# Umap plot merged replicates per condition
pdf("umapPlot_Lgr5Cre_conditions.pdf", width=12, height=6)
DimPlot(Lgr5Cre_MERGED,label=TRUE, split.by="orig.ident", pt.size = 0.3) + NoLegend()
dev.off()

# Feauture plot top 10 genes
pdf("feature_plot_top_10_MostVariantGenes.pdf", width=15, height=8)
FeaturePlot(Lgr5Cre_MERGED, features = top10, cols = c("cornsilk", "deepskyblue"))
dev.off()

# Feature plot on quality metrics ()
pdf("feautre plot qc_metrics.pdf", width = 13, height = 8)
FeaturePlot(Lgr5Cre_MERGED, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), cols = c("cornsilk" ,"deepskyblue"))
dev.off()

# Dot plot per top 10 genes
pdf("DotPlot_top10.pdf", width=15, height=8)
DotPlot(Lgr5Cre_MERGED, cols = c("deepskyblue", "orange"), group.by = "orig.ident", features = top10)
dev.off()

# Dot plot per selected Markers
pdf("Top10_Markers.pdf", width=15, height=8)
DotPlot(Lgr5Cre_MERGED, features = c("Reg3g", "Gsdmc4", "Prss32", "Krt8", "Elf3", "Sis", "Fabp1", "Hnf4a", "Tmigd1", "Fabp6"), split.by = "orig.ident", cols = c("cornsilk" ,"deepskyblue") )
dev.off()


##################################################################################################################################################################################################################

# Extract metadata
md = Lgr5Cre_MERGED@meta.data %>% as.data.table()
md[, .N, by = c("orig.ident", "seurat_clusters")]

cells_per_cluster = md[, .N, by = c("orig.ident", "seurat_clusters")] %>% dcast(., orig.ident ~ seurat_clusters, value.var = "N")
write.table(cells_per_cluster,file = "cells_per_cluster.tsv", row.names = TRUE, sep = "\t")
# Extract and save all genes
write.table(all.genes, file = "all_genes.tsv", sep = "\t", row.names = TRUE)

# Find all markers distinguishing cluster 0 from the rest of the clusters
cluster0.markers <- FindMarkers(Lgr5Cre_MERGED,ident.1 = 0, ident.2 = c(1,2,3,4,5,6,7,8,9,10,11,12,13,14), min.pct = 0.25, logfc.threshold = 0.37)
cluster1.markers <- FindMarkers(Lgr5Cre_MERGED,ident.1 = 1, ident.2 = c(0,2,3,4,5,6,7,8,9,10,11,12,13,14), min.pct = 0.25, logfc.threshold = 0.37)
cluster2.markers <- FindMarkers(Lgr5Cre_MERGED,ident.1 = 2, ident.2 = c(0,1,3,4,5,6,7,8,9,10,11,12,13,14), min.pct = 0.25, logfc.threshold = 0.37)
cluster3.markers <- FindMarkers(Lgr5Cre_MERGED,ident.1 = 3, ident.2 = c(0,1,2,4,5,6,7,8,9,10,11,12,13,14), min.pct = 0.25, logfc.threshold = 0.37)
cluster4.markers <- FindMarkers(Lgr5Cre_MERGED,ident.1 = 4, ident.2 = c(0,1,2,3,5,6,7,8,9,10,11,12,13,14), min.pct = 0.25, logfc.threshold = 0.37)
cluster5.markers <- FindMarkers(Lgr5Cre_MERGED,ident.1 = 5, ident.2 = c(0,1,2,3,4,6,7,8,9,10,11,12,13,14), min.pct = 0.25, logfc.threshold = 0.37)
cluster6.markers <- FindMarkers(Lgr5Cre_MERGED,ident.1 = 6, ident.2 = c(0,1,2,3,4,5,7,8,9,10,11,12,13,14), min.pct = 0.25, logfc.threshold = 0.37)
cluster7.markers <- FindMarkers(Lgr5Cre_MERGED,ident.1 = 7, ident.2 = c(0,1,2,3,4,5,6,8,9,10,11,12,13,14), min.pct = 0.25, logfc.threshold = 0.37)
cluster8.markers <- FindMarkers(Lgr5Cre_MERGED,ident.1 = 8, ident.2 = c(0,1,2,3,4,5,6,7,9,10,11,12,13,14), min.pct = 0.25, logfc.threshold = 0.37)
cluster9.markers <- FindMarkers(Lgr5Cre_MERGED,ident.1 = 9, ident.2 = c(0,1,2,3,4,5,6,7,8,10,11,12,13,14), min.pct = 0.25, logfc.threshold = 0.37)
cluster10.markers <- FindMarkers(Lgr5Cre_MERGED,ident.1 = 10, ident.2 = c(0,1,2,3,4,5,6,7,8,9,11,12,13,14), min.pct = 0.25, logfc.threshold = 0.37)
cluster11.markers <- FindMarkers(Lgr5Cre_MERGED,ident.1 = 11, ident.2 = c(0,1,2,3,4,5,6,7,8,9,10,12,13,14), min.pct = 0.25, logfc.threshold = 0.37)
cluster12.markers <- FindMarkers(Lgr5Cre_MERGED,ident.1 = 12, ident.2 = c(0,1,2,3,4,5,6,7,8,9,10,11,13,14), min.pct = 0.25, logfc.threshold = 0.37)
cluster13.markers <- FindMarkers(Lgr5Cre_MERGED,ident.1 = 13, ident.2 = c(0,1,2,3,4,5,6,7,8,9,10,11,12,14), min.pct = 0.25, logfc.threshold = 0.37)
cluster14.markers <- FindMarkers(Lgr5Cre_MERGED,ident.1 = 14, ident.2 = c(0,1,2,3,4,5,6,7,8,9,10,11,12,13), min.pct = 0.25, logfc.threshold = 0.37)

# Save files
write.table(cluster0.markers, file = "cluster0.markers.tsv", sep = "\t", row.names = TRUE)
write.table(cluster1.markers, file = "cluster1.markers.tsv", sep = "\t", row.names = TRUE)
write.table(cluster2.markers, file = "cluster2.markers.tsv", sep = "\t", row.names = TRUE)
write.table(cluster3.markers, file = "cluster3.markers.tsv", sep = "\t", row.names = TRUE)
write.table(cluster4.markers, file = "cluster4.markers.tsv", sep = "\t", row.names = TRUE)
write.table(cluster5.markers, file = "cluster5.markers.tsv", sep = "\t", row.names = TRUE)
write.table(cluster6.markers, file = "cluster6.markers.tsv", sep = "\t", row.names = TRUE)
write.table(cluster7.markers, file = "cluster7.markers.tsv", sep = "\t", row.names = TRUE)
write.table(cluster8.markers, file = "cluster8.markers.tsv", sep = "\t", row.names = TRUE)
write.table(cluster9.markers, file = "cluster9.markers.tsv", sep = "\t", row.names = TRUE)
write.table(cluster10.markers, file = "cluster10.markers.tsv", sep = "\t", row.names = TRUE)
write.table(cluster11.markers, file = "cluster11.markers.tsv", sep = "\t", row.names = TRUE)
write.table(cluster12.markers, file = "cluster12.markers.tsv", sep = "\t", row.names = TRUE)
write.table(cluster13.markers, file = "cluster13.markers.tsv", sep = "\t", row.names = TRUE)
write.table(cluster14.markers, file = "cluster14.markers.tsv", sep = "\t", row.names = TRUE)

# Mat code
#Lgr5Cre_MERGED.markers = FindAllMarkers(Lgr5Cre_MERGED, only.pos = F, min.pct = 0.25, logfc.threshold = 0.37)


##################################################################################################################################################################################################################


# Feature Plots based on most variable features per cluster

pdf("Feature plot cluster_0 Markers 1-5.pdf", width=20, height=30)
FeaturePlot(Lgr5Cre_MERGED, features = c("Olfm4", "Gkn3", "Ifitm3", "Jaml", "2410006H16Rik"), split.by = "orig.ident", cols = c("grey" ,"blue"))
dev.off()

pdf("Feature plot cluster_0 Markers 6_10.pdf", width=20, height=30)
FeaturePlot(Lgr5Cre_MERGED, features = c("Slc12a2", "Cd74", "Clca3b", "Pdgfa"), split.by = "orig.ident", cols = c("grey" ,"blue"))
dev.off()

pdf("Feature plot cluster_1 Markers 1_5.pdf", width=20, height=30)
FeaturePlot(Lgr5Cre_MERGED, features = c("Ube2c", "Hmgb2", "Cenpa", "Cks2", "Birc5"), split.by = "orig.ident", cols = c("grey" ,"blue"))
dev.off()

pdf("Feature plot cluster_1 Markers 6_10.pdf", width=20, height=30)
FeaturePlot(Lgr5Cre_MERGED, features = c("H2afx", "Tubb4b", "Cenpf", "Tubb5", "Ccnb2"), split.by = "orig.ident", cols = c("grey" ,"blue"))
dev.off()

pdf("Feature plot cluster_2 Markers 1_5.pdf", width=20, height=30)
FeaturePlot(Lgr5Cre_MERGED, features = c("Zg16", "Fcgbp", "Muc2", "Tff3", "Clca1"), split.by = "orig.ident", cols = c("grey" ,"blue"))
dev.off()

pdf("Feature plot cluster_2 Markers 6_10.pdf", width=20, height=30)
FeaturePlot(Lgr5Cre_MERGED, features = c("Agr2", "Spink4", "Guca2a", "Ccl6", "Klk1"), split.by = "orig.ident", cols = c("grey" ,"blue"))
dev.off()

pdf("Feature plot cluster_3 Markers 1_5.pdf", width=20, height=30)
FeaturePlot(Lgr5Cre_MERGED, features = c("Pclaf", "Stmn1", "Dut", "Lig1", "Pcna"), split.by = "orig.ident", cols = c("grey" ,"blue"))
dev.off()

pdf("Feature plot cluster_3 Markers 6_10.pdf", width=20, height=30)
FeaturePlot(Lgr5Cre_MERGED, features = c("Tyms", "Hells", "Siva1", "Olfm4", "Dek"), split.by = "orig.ident", cols = c("grey" ,"blue"))
dev.off()

pdf("Feature plot cluster_4 Markers 1_5.pdf", width=20, height=30)
FeaturePlot(Lgr5Cre_MERGED, features = c("Dmbt1", "Hspd1", "Hells", "Dut", "Hspe1"), split.by = "orig.ident", cols = c("grey" ,"blue"))
dev.off()

pdf("Feature plot cluster_4 Markers 6_10.pdf", width=20, height=30)
FeaturePlot(Lgr5Cre_MERGED, features = c("C1qbp", "Snhg4", "Ranbp1", "Pcna", "Tomm5"), split.by = "orig.ident", cols = c("grey" ,"blue"))
dev.off()

pdf("Feature plot cluster_5 Markers 1_5.pdf", width=20, height=30)
FeaturePlot(Lgr5Cre_MERGED, features = c("Ube2c", "Birc5", "Rbp7", "Dmbt1", "H2afx"), split.by = "orig.ident", cols = c("grey" ,"blue"))
dev.off()

pdf("Feature plot cluster_5 Markers 6_10.pdf", width=20, height=30)
FeaturePlot(Lgr5Cre_MERGED, features = c("Hmgb2", "Pclaf", "Hist1h1b", "Tubb4b", "Ube2s"), split.by = "orig.ident", cols = c("grey" ,"blue"))
dev.off()


pdf("Feature plot cluster_6 Markers 1_5.pdf", width=20, height=30)
FeaturePlot(Lgr5Cre_MERGED, features = c("Agr2", "Selenom", "Spink4", "Tff3", "Guca2a"), split.by = "orig.ident", cols = c("grey" ,"blue"))
dev.off()

pdf("Feature plot cluster_6 Markers 6_10.pdf", width=20, height=30)
FeaturePlot(Lgr5Cre_MERGED, features = c("Txndc5", "Fcgbp", "Smim6", "Fxyd3", "Muc2"), split.by = "orig.ident", cols = c("grey" ,"blue"))
dev.off()

pdf("Feature plot cluster_7 Markers 1_5.pdf", width=20, height=30)
FeaturePlot(Lgr5Cre_MERGED, features = c("Rbp2", "Arg2", "Fabp1", "Smim24", "St3gal4"), split.by = "orig.ident", cols = c("grey" ,"blue"))
dev.off()

pdf("Feature plot cluster_7 Markers 6_10.pdf", width=20, height=30)
FeaturePlot(Lgr5Cre_MERGED, features = c("Krt19", "Dmbt1", "Gna11", "Prap1", "Gpx1"), split.by = "orig.ident", cols = c("grey" ,"blue"))
dev.off()

pdf("Feature plot cluster_8 Markers 1_5.pdf", width=20, height=30)
FeaturePlot(Lgr5Cre_MERGED, features = c("Defa30", "Gm14851", "AY61184", "Lyz1", "Defa24"), split.by = "orig.ident", cols = c("grey" ,"blue"))
dev.off()

pdf("Feature plot cluster_8 Markers 6_10.pdf", width=20, height=30)
FeaturePlot(Lgr5Cre_MERGED, features = c("Defa21", "Defa29", "Itln1", "Defa36", "Defa26"), split.by = "orig.ident", cols = c("grey" ,"blue"))
dev.off()

pdf("Feature plot cluster_9 Markers 1_5.pdf", width=20, height=30)
FeaturePlot(Lgr5Cre_MERGED, features = c("Reg1", "Rbp2", "Fabp1", "Apoa1", "Gsta1"), split.by = "orig.ident", cols = c("grey" ,"blue"))
dev.off()

pdf("Feature plot cluster_9 Markers 6_10.pdf", width=20, height=30)
FeaturePlot(Lgr5Cre_MERGED, features = c("Fabp2", "Arg2", "Gstm3", "Adh6a", "Adh6a"), split.by = "orig.ident", cols = c("grey" ,"blue"))
dev.off()

pdf("Feature plot cluster_10 Markers 1_5.pdf", width=20, height=30)
FeaturePlot(Lgr5Cre_MERGED, features = c("Gip", "Ghrl", "Cck", "Fabp5", "Sct"), split.by = "orig.ident", cols = c("grey" ,"blue"))
dev.off()

pdf("Feature plot cluster_10 Markers 6_10.pdf", width=20, height=30)
FeaturePlot(Lgr5Cre_MERGED, features = c("Cdkn1c", "Rbp4", "Isl1", "Myl7", "Fam183b"), split.by = "orig.ident", cols = c("grey" ,"blue"))
dev.off()

pdf("Feature plot cluster_11 Markers 1_5.pdf", width=20, height=30)
FeaturePlot(Lgr5Cre_MERGED, features = c("Rgs13", "Alox5ap", "Lrmp", "Cd24a", "Ltc4s"), split.by = "orig.ident", cols = c("grey" ,"blue"))
dev.off()

pdf("Feature plot cluster_11 Markers 6_10.pdf", width=20, height=30)
FeaturePlot(Lgr5Cre_MERGED, features = c("Hck", "Fyb", "Kctd12", "Dclk1", "Adh1"), split.by = "orig.ident", cols = c("grey" ,"blue"))
dev.off()

pdf("Feature plot cluster_12 Markers 1_5.pdf", width=20, height=30)
FeaturePlot(Lgr5Cre_MERGED, features = c("Fabp6", "Reg3b", "Reg3g", "Spink1", "Clec2h"), split.by = "orig.ident", cols = c("grey" ,"blue"))
dev.off()

pdf("Feature plot cluster_12 Markers 6_10.pdf", width=20, height=30)
FeaturePlot(Lgr5Cre_MERGED, features = c("Slc51a", "Apoa1", "Lgals3", "2200002D01Rik", "Mgatc"), split.by = "orig.ident", cols = c("grey" ,"blue"))
dev.off()

pdf("Feature plot cluster_13 Markers 1_5.pdf", width=20, height=30)
FeaturePlot(Lgr5Cre_MERGED, features = c("Chgb", "Chga", "Tac1", "Reg4", "Vim"), split.by = "orig.ident", cols = c("grey" ,"blue"))
dev.off()

pdf("Feature plot cluster_13 Markers 6_10.pdf", width=20, height=30)
FeaturePlot(Lgr5Cre_MERGED, features = c("Tph1", "Gstt1", "Sct", "Pcsk1", "Hmgn3"), split.by = "orig.ident", cols = c("grey" ,"blue"))
dev.off()

pdf("Feature plot cluster_14 Markers 1_5.pdf", width=20, height=30)
FeaturePlot(Lgr5Cre_MERGED, features = c("Ccl5", "Gzma", "Cd3g", "Cd7", "Nkg7"), split.by = "orig.ident", cols = c("grey" ,"blue"))
dev.off()

pdf("Feature plot cluster_14 Markers 6_10.pdf", width=20, height=30)
FeaturePlot(Lgr5Cre_MERGED, features = c("Cd52", "Fcer1g", "AW112010", "Trbc2", "Tyrobp"), split.by = "orig.ident", cols = c("grey" ,"blue"))
dev.off()

## Selected Markers
pdf("Feature plot Selected Markers.pdf", width=20, height=40)
FeaturePlot(Lgr5Cre_MERGED, features = c("Sis", "Fabp1", "Fabp6", "Muc2", "Lyz1", "Neurod1", "Avil" ), split.by = "orig.ident", cols = c("grey" ,"blue"))
dev.off()


##################################################################################################################################################################################################################


# DotPlots per Cluster
levels(Lgr5Cre_MERGED_Renamed) = c("Stem I", "Stem II", "Stem / TA", "Ent.Progenitor I", "Ent.Progenitor II", "Enterocyte Immature", "Enterocyte Mature", "Goblet I", "Goblet II", "Goblet III", "Paneth", "Tuft", "Enteroendocrine I", "Enteroendocrine II", "Unclassified")
pdf("Enterocyte_Immature Markers.pdf", width=5, height=5)
p =  DotPlot(Lgr5Cre_MERGED_Renamed,features = c("Gsdmc4","Krt8","Prss32","Reg3g"), cols = c("darkslategray1","darkorange1"))+ xlab('Ent.Immature Markers') +  ylab('') + RotatedAxis()  +  theme(text=element_text(family="FreeSerif"))
p #+ ggtitle("Enterocyte Immature Markers") + RotatedAxis()
dev.off()

pdf("Enterocyte_Mature Markers.pdf", width=10, height=5)
p = DotPlot(Lgr5Cre_MERGED_Renamed,features = c("Aldob","Alpi","Apoa1","Apoa4","Clec2h","Dpep1","Elf3","Fabp1","Fabp6","Fam151a","Hnf4a","Hnf4aos","Hnf4g","Lct","Mep1a","Muc3","Naaladl1","Neu1","Nudt4","Phgr1","Plb1","Pmp22","Prss30","Sis","Slc34a2","Slc51a","Slc51b","Tmigd1","Xpnpep2"), cols = c("darkslategray1","darkorange1"))+ xlab('Ent.Mature Markers') +  ylab('') + RotatedAxis()  +  theme(text=element_text(family="FreeSerif"))
p #+ ggtitle("Enterocyte Mature Markers")  + RotatedAxis()
dev.off()

pdf("Enterocyte Progenitor Markers.pdf", width=7, height=4)
p = DotPlot(Lgr5Cre_MERGED_Renamed,features = c("Aurka","Birc5","Ccna2","Ccnb1","Ccnb2","Cdc20","Cdc25c","Cdkn2d","Cdkn3","Cenpa","Cps1","Kif22","Kif23","Melk","Nek2","Plk1","Rbp7","Sapcd2","Tacc3","Ube2c"),cols = c("darkslategray1","darkorange1"))  + xlab('Ent.Progenitor Markers') +  ylab('') + RotatedAxis()  +  theme(text=element_text(family="FreeSerif"))
p # + ggtitle("Enterocyte Progenitor Markers")
dev.off()

pdf("Goblet Markers.pdf", width=8.5, height=5)
p = DotPlot(Lgr5Cre_MERGED_Renamed,features = c("Agr2","Atoh1","Ccl6","Ccl9","Clca1","Clca3a1","Fcgbp","Foxa1","Klf4","Klk1","Lrrc26","Muc2","Spdef","Spink4","Tff3","Tpsg1","Tspan13","Txndc5","Zg16"), cols = c("darkslategray1","darkorange1"))+ xlab('Goblet Markers') +  ylab('') + RotatedAxis()  +  theme(text=element_text(family="FreeSerif"))
p #+ ggtitle("Goblet Markers")
dev.off()

pdf("Paneth Markers.pdf", width=7.5, height=5)
p = DotPlot(Lgr5Cre_MERGED_Renamed,features = c("Ang4","Defa17","Defa21","Defa22","Defa24","Defa3","Dll4","Gfi1","Gm14851","Lyz1","Mmp7","Mptx2","Sox9"), cols = c("darkslategray1","darkorange1")) + xlab('Paneth Markers') +  ylab('') + RotatedAxis()  +  theme(text=element_text(family="FreeSerif"))
# Gene Gm15284 & Defa-rs1 excluded as there are not in the dataset 
p #+ ggtitle("Paneth Markers")
dev.off()

pdf("Enteroendocrine Markers.pdf", width=10, height=4.5)
p = DotPlot(Lgr5Cre_MERGED_Renamed,features = c("Arx","Bex2","Cck","Chga","Chgb","Cpe","Fam183b","Fev","Foxa2","Gcg","Gch1","Gck","Gfi1","Gfra3","Hmgn3","Insm1","Isl1","Marcksl1","Neurod1","Neurod2","Neurog3","Nkx2-2","Pax6","Pcsk1n","Pyy","Sst","Tac1","Tph1","Vwa5b2"), cols = c("darkslategray1","darkorange1"))  + xlab('Enteroendocrine Markers') +  ylab('') + RotatedAxis()  +  theme(text=element_text(family="FreeSerif"))
# Gene Ngfrap1 excluded. It can not be found in the dataset
p #+ ggtitle("Enteroendocrine Markers")
dev.off()
###################################################################################################################
pdf("STEM_TA_PRO Markers.pdf", width=11.2, height=4)
p = DotPlot(Lgr5Cre_MERGED_Renamed,features = c("Ascl2","Axin2","Bex1","Fzd2","Fzd7","Gkn3","Hes1","Igfbp4","Lgr5","Lrp5","Lrp6","Notch1","Olfm4","Prom1","Slc12a2","Smo","Yap1"       ,         "Stmn1", "Tubb5"       ,     "Aurka","Birc5","Ccna2","Ccnb1","Ccnb2","Cdc20","Cdc25c","Cdkn2d","Cdkn3","Cenpa","Cps1","Kif22","Kif23","Melk","Nek2","Plk1","Rbp7","Sapcd2","Tacc3","Ube2c"  ), cols = c("darkslategray1","orange"))  + xlab('') +  ylab('') + RotatedAxis()  +  theme(text=element_text(family = "FreeSerif" ))
p #+ ggtitle("Stem Markers")
dev.off()

pdf("ENTEROCYTE_GOBLET_Markers.pdf", width=12.7, height=4)
p = DotPlot(Lgr5Cre_MERGED_Renamed,features = c("Gsdmc4","Krt8","Prss32","Reg3g"          ,       "Aldob","Alpi","Apoa1","Apoa4","Clec2h","Dpep1","Elf3","Fabp1","Fabp6","Fam151a","Hnf4a","Hnf4aos","Hnf4g","Lct","Mep1a","Muc3","Naaladl1","Neu1","Nudt4","Phgr1","Plb1","Pmp22","Prss30","Sis","Slc34a2","Slc51a","Slc51b","Tmigd1","Xpnpep2"                  ,                      "Agr2","Atoh1","Ccl6","Ccl9","Clca1","Clca3a1","Fcgbp","Foxa1","Klf4","Klk1","Lrrc26","Muc2","Spdef","Spink4","Tff3","Tpsg1","Tspan13","Txndc5","Zg16"    ), cols = c("darkslategray1","orange"))  + xlab('') +  ylab('') + RotatedAxis()  +  theme(text=element_text(family = "FreeSerif" ))
p #+ ggtitle("Stem Markers")
dev.off()

pdf("Paneth_Tuft_ENTEROENDO_Markers.pdf", width=15, height=4)
p = DotPlot(Lgr5Cre_MERGED_Renamed,features = c("Ang4","Defa17","Defa21","Defa22","Defa24","Defa3","Dll4","Gfi1","Gm14851","Lyz1","Mmp7","Mptx2","Sox9"         ,  "Adh1","Aldh2","Alox5ap","Avil","Cd24a","Dclk1","Fyb","Gfi1b","Gng13","Hck","Il13ra1","Il25","Kctd12","Lrmp","Ltc4s","Ly6g6f","Ptpn6","Ptprc","Rgs13","Sh2d6","Skap2","Tmem176a","Trpm5"       ,          "Arx","Bex2","Cck","Chga","Chgb","Cpe","Fam183b","Fev","Foxa2","Gcg","Gch1","Gck","Gfra3","Hmgn3","Insm1","Isl1","Marcksl1","Neurod1","Neurod2","Neurog3","Nkx2-2","Pax6","Pcsk1n","Pyy","Sst","Tac1","Tph1","Vwa5b2"         ), cols = c("darkslategray1","orange"))  + xlab('') +  ylab('') + RotatedAxis()  +  theme(text=element_text(family = "FreeSerif" ))
p #+ ggtitle("Stem Markers")
dev.off()
###################################################################################################################


pdf("Stem Markers.pdf", width=7, height=4)
p = DotPlot(Lgr5Cre_MERGED_Renamed,features = c("Ascl2","Axin2","Bex1","Fzd2","Fzd7","Gkn3","Hes1","Igfbp4","Lgr5","Lrp5","Lrp6","Notch1","Olfm4","Prom1","Slc12a2","Smo","Yap1"), cols = c("darkslategray1","darkorange1"))  + xlab('Stem Markers') +  ylab('') + RotatedAxis()  +  theme(text=element_text(family="FreeSerif"))
p #+ ggtitle("Stem Markers")
dev.off()


pdf("Tuft Markers.pdf", width=8.7, height=5)
p = DotPlot(Lgr5Cre_MERGED_Renamed,features = c("Adh1","Aldh2","Alox5ap","Avil","Cd24a","Dclk1","Fyb","Gfi1b","Gng13","Hck","Il13ra1","Il25","Kctd12","Lrmp","Ltc4s","Ly6g6f","Ptpn6","Ptprc","Rgs13","Sh2d6","Skap2","Tmem176a","Trpm5"), cols = c("darkslategray1","darkorange1"))  + xlab('Tuft Markers') +  ylab('') + RotatedAxis()  +  theme(text=element_text(family="FreeSerif"))
p #+ ggtitle("Tuft Markers")
dev.off()

pdf("TA Markers.pdf", width=4.2, height=5)
p = DotPlot(Lgr5Cre_MERGED_Renamed,features = c("Stmn1", "Tubb5"),cols = c("darkslategray1","darkorange1"))  + xlab('TA Markers') +  ylab('') + RotatedAxis()  +  theme(text=element_text(family="FreeSerif"))
p #+ ggtitle("TA Markers")
dev.off()

pdf("Reserved Stem Markers.pdf", width=15, height=8)
p = DotPlot(Lgr5Cre_MERGED,features = c("Lrig1", "Bmi1", "Hopx"),cols = c("blue","orange")) + RotatedAxis()
p + ggtitle("Reserved Stem Markers")
dev.off()

pdf("Necroptosis Markers.pdf", width=15, height=8)
p = DotPlot(Lgr5Cre_MERGED,features = c("Zbp1", "Ripk1", "Ripk3", "Cxcl1", "Ccl20", "Tnf", "Csf1" ),cols = c("blue","orange")) + RotatedAxis()
p + ggtitle("Necroptosis Markers")
dev.off()

pdf("Lgr5 Marker.pdf", width=15, height=8)
p = DotPlot(Lgr5Cre_MERGED_Renamed,features = c("Lgr5" ),cols = c("blue","orange")) + RotatedAxis()
p + ggtitle("Lgr5 Marker")
dev.off()

pdf("GFP Marker.pdf", width=15, height=8)
p = DotPlot(Lgr5Cre_MERGED,features = c("GFP" ), cols = c("darkslategray1","darkorange1"))  + xlab('Gene') +  ylab('') + RotatedAxis()
p + ggtitle("GFP Marker")
dev.off()

pdf("Nature paper Markers.pdf", width=15, height=8)
p = DotPlot(Lgr5Cre_MERGED,features = c("Mbl2","Ptprs","C4bp","Icam1","Ptpn22","Syk","Shmt2","Zfp809","Trim35","Bst2","Ltf","Mx1","Pml","Trim6","Adar","Mx2","S100a14","Gbp3","Ifitm3","Rnf135","Tmem173","Isg20","Jak3","Stat2","Oas2","Aim2","Oas1b","Dhx58","Oas1a","Eif2ak2","Zc3hav1","Ereg","Parp14","Zbp1","Cxcl16","Oasl2","Ddx58","Trim25","Rnf125","Vnn1","Pvr","Gbp4","Gbp10","Oasl1","Gbp8","Trim15","Cd55","Oas3","Isg15","Irf7","Trim12c","Ifit2","Ifit3","Trim30a","Nos2"), cols = c("blue","orange")) + RotatedAxis()
p + ggtitle("Nature Paper Markers")
dev.off()


##################################################################################################################################################################################################################


# Dot plots per condition

pdf("Enterocyte Immature Markers Grouped.pdf", width=15, height=8)
p =  DotPlot(Lgr5Cre_MERGED_Renamed,features = c("Reg3g", "Gsdmc4", "Prss32", "Krt8"), group.by = "orig.ident" ,cols = c("blue","orange"))
p + ggtitle("Enterocyte Immature Markers") + RotatedAxis()
dev.off()

pdf("Enterocyte Mature Markers Grouped.pdf", width=15, height=8)
p = DotPlot(Lgr5Cre_MERGED,features = c("Elf3","Sis","Fabp1","Hnf4aos","Hnf4a", "Hnf4g", "Tmigd1","Fabp6","Slc51b","Slc51a","Mep1a","Fam151a","Naaladl1","Slc34a2","Plb1","Nudt4","Dpep1","Pmp22","Xpnpep2","Muc3","Neu1","Clec2h","Phgr1","Prss30","Aldob","Alpi","Apoa1","Apoa4","Lct"), group.by = "orig.ident" ,cols = c("blue","orange")) + RotatedAxis()
p + ggtitle("Enterocyte Mature Markers")
dev.off()

pdf("Enterocyte Progenitor Markers Grouped.pdf", width=15, height=8)
p = DotPlot(Lgr5Cre_MERGED,features = c("Ccnb1","Cdc20","Cenpa","Cdkn3","Cdc25c","Ccnb2","Kif22","Ube2c","Sapcd2","Rbp7","Ccna2","Aurka","Cdkn2d","Kif23","Nek2","Birc5","Plk1","Tacc3","Melk","Cps1"), group.by = "orig.ident", cols = c("blue","orange")) + RotatedAxis()
p + ggtitle("Enterocyte Progenitor Markers")
dev.off()

pdf("Goblet Markers Grouped.pdf", width=15, height=8)
p = DotPlot(Lgr5Cre_MERGED,features = c("Muc2","Spdef","Foxa1","Agr2","Spink4","Fcgbp","Tff3","Zg16","Clca1","Ccl6","Klk1","Tpsg1","Ccl9","Txndc5","Tspan13","Atoh1","Lrrc26","Clca3a1","Klf4"), group.by = "orig.ident",  cols = c("blue","orange")) + RotatedAxis()
p + ggtitle("Goblet Markers")
dev.off()

pdf("Paneth Markers Grouped.pdf", width=15, height=8)
p = DotPlot(Lgr5Cre_MERGED,features = c("Lyz1","Mmp7","Dll4","Sox9","Gfi1","Gm14851","Defa21","Defa22","Defa17","Defa24","Defa3","Mptx2","Ang4"), group.by = "orig.ident", cols = c("blue","orange")) + RotatedAxis()
# Gene Gm15284 & Defa-rs1 excluded as there are not in the dataset 
p + ggtitle("Paneth Markers")
dev.off()

pdf("Enteroendocrine Markers Grouped.pdf", width=15, height=8)
p = DotPlot(Lgr5Cre_MERGED,features = c("Gfi1","Neurog3","Neurod1","Chga","Chgb","Isl1","Arx","Pax6","Foxa2","Sst","Gck","Gcg","Tph1","Pyy","Gfra3","Cpe","Tac1","Fam183b", "Hmgn3","Cck","Fev","Gch1","Pcsk1n", "Bex2","Vwa5b2","Nkx2-2","Marcksl1","Neurod2","Insm1"),group.by = "orig.ident",  cols = c("blue","orange")) + RotatedAxis()
# Gene Ngfrap1 excluded. It can not be found in the dataset
p + ggtitle("Enteroendocrine Markers")
dev.off()

pdf("Stem Markers Grouped.pdf", width=15, height=8)
p = DotPlot(Lgr5Cre_MERGED,features = c("Lgr5","Ascl2","Olfm4","Prom1","Axin2","Fzd2","Fzd7","Lrp5","Lrp6","Notch1","Hes1","Smo","Yap1","Igfbp4","Bex1","Gkn3","Slc12a2"), group.by = "orig.ident", cols = c("blue","orange")) + RotatedAxis()
p + ggtitle("Stem Markers")
dev.off()

pdf("Tuft Markers Grouped.pdf", width=15, height=8)
p = DotPlot(Lgr5Cre_MERGED,features = c("Dclk1","Ptprc","Avil","Lrmp","Alox5ap","Rgs13","Sh2d6","Ltc4s","Hck","Cd24a","Trpm5","Kctd12","Aldh2","Il13ra1","Gng13","Tmem176a","Skap2","Ptpn6","Ly6g6f","Fyb","Adh1","Gfi1b","Il25"), group.by = "orig.ident", cols = c("blue","orange")) + RotatedAxis()
p + ggtitle("Tuft Markers")
dev.off()

pdf("TA Markers Grouped.pdf", width=15, height=8)
p = DotPlot(Lgr5Cre_MERGED,features = c("Stmn1", "Tubb5"),group.by = "orig.ident", cols = c("blue","orange")) + RotatedAxis()
p + ggtitle("TA Markers")
dev.off()

pdf("Reserved Stem Markers Grouped.pdf", width=15, height=8)
p = DotPlot(Lgr5Cre_MERGED,features = c("Lrig1", "Bmi1", "Hopx"),group.by = "orig.ident", cols = c("blue","orange")) + RotatedAxis()
p + ggtitle("Reserved Stem Markers")
dev.off()

pdf("Necroptosis Markers Grouped.pdf", width=15, height=8)
p = DotPlot(Lgr5Cre_MERGED,features = c("Zbp1", "Ripk1", "Ripk3", "Cxcl1", "Ccl20", "Tnf", "Csf1" ),group.by = "orig.ident", cols = c("blue","orange")) + RotatedAxis()
p + ggtitle("Necroptosis Markers")
dev.off()

pdf("Lgr5 Marker Grouped.pdf", width=15, height=8)
p = DotPlot(Lgr5Cre_MERGED,features = c("Lgr5" ), group.by = "orig.ident", cols = c("blue","orange")) + RotatedAxis()
p + ggtitle("Lgr5 Marker")
dev.off()

pdf("GFP Marker Grouped.pdf", width=15, height=8)
p = DotPlot(Lgr5Cre_MERGED,features = c("GFP"), group.by = "orig.ident", cols = c("blue","orange")) + RotatedAxis()
p + ggtitle("GFP Marker")
dev.off()

pdf("Nature paper Markers.pdf", width=15, height=8)
p = DotPlot(Lgr5Cre_MERGED,features = c("Mbl2","Ptprs","C4bp","Icam1","Ptpn22","Syk","Shmt2","Zfp809","Trim35","Bst2","Ltf","Mx1","Pml","Trim6","Adar","Mx2","S100a14","Gbp3","Ifitm3","Rnf135","Tmem173","Isg20","Jak3","Stat2","Oas2","Aim2","Oas1b","Dhx58","Oas1a","Eif2ak2","Zc3hav1","Ereg","Parp14","Zbp1","Cxcl16","Oasl2","Ddx58","Trim25","Rnf125","Vnn1","Pvr","Gbp4","Gbp10","Oasl1","Gbp8","Trim15","Cd55","Oas3","Isg15","Irf7","Trim12c","Ifit2","Ifit3","Trim30a","Nos2"), group.by = "orig.ident", cols = c("blue","orange")) + RotatedAxis()
p + ggtitle("Nature Paper Markers")
dev.off()


##################################################################################################################################################################################################################


# Umap renamed cluster
pdf("Umap_renamed_Clusterd Markers.pdf", width=10, height=7)
Lgr5Cre_MERGED_Renamed=RenameIdents(Lgr5Cre_MERGED,  `0` = "Stem I", `1` = "Stem II", `2` = "Ent.Progenitor I", `3` = "Goblet I", `4` = "Ent.Progenitor II", `5` = "Enterocyte Immature", `6` = "Goblet II", `7` = "Stem / TA", `8` = "Enterocyte Mature", `9` = "Paneth", `10` = "Enteroendocrine I", `11` = "Tuft", `12` = "Enteroendocrine II", `13` = "Goblet III", `14` = "Unclassified")
DimPlot(Lgr5Cre_MERGED_Renamed, label = TRUE)
dev.off()


pdf("umapPlot_Lgr5Cre_condition_Renamed.pdf", width=13, height=6.2)
DimPlot(Lgr5Cre_MERGED_Renamed,label=TRUE, split.by="orig.ident", pt.size = 0.3) + NoLegend()
dev.off()



##################################################################################################################################################################################################################

# Cell cycle

# Read in the expression matrix The first row is a header row, the first column is rownames
exp.mat <- read.table(file = "/media/dimbo/10T/data/talianidis_data/scRNA_Seq/Talianidis_GFP_2_fixed/analysis/Seurat/cell_cycle/", header = TRUE, as.is = TRUE, row.names = 1)

s.genes <- cc.genes$s.genes
s.genes <- tolower(s.genes)
s.genes = str_to_title(s.genes)

g2m.genes <- cc.genes$g2m.genes
g2m.genes <- tolower(g2m.genes)
g2m.genes = str_to_title(g2m.genes)

# Assign Cell-Cycle scores
Lgr5Cre_MERGED <- CellCycleScoring(Lgr5Cre_MERGED, s.features = s.genes, g2m.features = g2m.genes, set.ident = TRUE)

pdf("PCA on Cell Cycle Genes.pdf", width=15, height=8)
Lgr5Cre_MERGED <- RunPCA(Lgr5Cre_MERGED, features = c(s.genes, g2m.genes))
DimPlot(Lgr5Cre_MERGED)
dev.off()

# Regress out cell cycle scores during data scaling
Lgr5Cre_MERGED <- ScaleData(Lgr5Cre_MERGED, vars.to.regress = c("S.Score", "G2M.Score"), features = rownames(Lgr5Cre_MERGED))

Lgr5Cre_MERGED <- RunPCA(Lgr5Cre_MERGED, features = VariableFeatures(Lgr5Cre_MERGED), nfeatures.print = 10)

Lgr5Cre_MERGED <- RunPCA(Lgr5Cre_MERGED, features = c(s.genes, g2m.genes))
DimPlot(Lgr5Cre_MERGED)


##################################################################################################################################################################################################################

# Create metadata from main object. e.g export WT and Setdb1KO from Merged object and create two new objects

split_obj = SplitObject(Lgr5Cre_MERGED, split.by = "orig.ident")

# See how the objects are named
View(split_obj)

Setdb1KO = split_obj[["Setdb1KO"]]

WT = split_obj[["Lgr5Cre"]]

Setdb1KO <- FindVariableFeatures(Setdb1KO, selection.method = "vst", nfeatures = 2000)
WT<- FindVariableFeatures(WT, selection.method = "vst", nfeatures = 2000)

# WT
top50WT <- head(VariableFeatures(WT), 50)
# Plot variable features
pdf("50variable_features_WT.pdf", width=8, height=)
plot1 <- VariableFeaturePlot(WT)
plot2 <- LabelPoints(plot = plot1, points = top50WT, repel = TRUE)
plot2 + ggtitle("WT Most Varibale Features")
dev.off()

# Setdb1-KO
top50KO <- head(VariableFeatures(Setdb1KO), 50)
# Plot variable features
pdf("50variable_features_Setdb1KO.pdf", width=8, height=)
plot1 <- VariableFeaturePlot(Setdb1KO)
plot2 <- LabelPoints(plot = plot1, points = top50KO, repel = TRUE)
plot2+ ggtitle("Setdb1-KO Most Varibale Features")
dev.off()


##################################################################################################################################################################################################################


# Calculate averaged expression values for each identity class
avg_exp_Setdb1KO = (AverageExpression(object = Setdb1KO))
avg_exp_WT = (AverageExpression(object = WT))

write.table(avg_exp_Setdb1KO, file = "avg_exp_Setdb1KO.txt", sep = "\t",
            row.names = TRUE, col.names = NA)
write.table(avg_exp_WT, file = "avg_exp_WT.txt", sep = "\t",
            row.names = TRUE, col.names = NA)


##################################################################################################################################################################################################################


# Create violin plots for setdb1KO and WT metadata (merged normalized-processed and then split) for nfeatures 
# ncount per cluster.
pdf("Merged_ViolinPlot_per_Cluster.pdf", width=15, height=5)
VlnPlot(Lgr5Cre_MERGED_Renamed, features = c("nFeature_RNA", "nCount_RNA"), split.by = "orig.ident", ncol = 2, pt.size = 0)
dev.off()


##################################################################################################################################################################################################################


# Subset clusters and recluster
Lgr5Cre_0.1.3.4.5=subset(Lgr5Cre_MERGED, idents = c(0,1,2,4,7))

top10_Lgr5Cre_0.1.3.4.5 <- head(VariableFeatures(Lgr5Cre_0.1.3.4.5), 10)

Lgr5Cre_0.1.3.4.5 <- RunPCA(Lgr5Cre_0.1.3.4.5, features = VariableFeatures(object = Lgr5Cre_0.1.3.4.5))
print(Lgr5Cre_0.1.3.4.5[["pca"]], dims = 1:5, nfeatures = 5)

Lgr5Cre_0.1.3.4.5=FindNeighbors(Lgr5Cre_0.1.3.4.5,,dims = 1:10)
Lgr5Cre_0.1.3.4.5 <- FindClusters(Lgr5Cre_0.1.3.4.5, resolution = 0.5)

Lgr5Cre_0.1.3.4.5=RunUMAP(Lgr5Cre_0.1.3.4.5, dims = 1:10)

# Umap plot
pdf("umapPlot_Lgr5Cre_0.1.3.4.5.pdf", width=10, height=8)
DimPlot(Lgr5Cre_0.1.3.4.5, reduction = "umap")
dev.off()

# DOTPLOTS
########################################
## NEW
###################################################################################################################
levels(Lgr5Cre_0.1.3.4.5_Renamed) = c("Stem I", "Stem II", "Stem S phase",   "Ent.Progenitor I", "Ent.Progenitor II", "Ent.Progenitor III", "Ent.Progenitor / TA","Goblet")

pdf("2ndUMAP_DOTPLOT.pdf", width=11.2, height=4)
p = DotPlot(Lgr5Cre_0.1.3.4.5_Renamed,features = c("Ascl2","Axin2","Bex1","Fzd2","Fzd7","Gkn3","Hes1","Igfbp4","Lgr5","Lrp5","Lrp6","Notch1","Olfm4","Prom1","Slc12a2","Smo","Yap1"       ,         "Stmn1", "Tubb5"       ,     "Aurka","Birc5","Ccna2","Ccnb1","Ccnb2","Cdc20","Cdc25c","Cdkn2d","Cdkn3","Cenpa","Cps1","Kif22","Kif23","Melk","Nek2","Plk1","Rbp7","Sapcd2","Tacc3","Ube2c"                   ,                 "Agr2","Spink4","Fcgbp","Tff3","Zg16"), cols = c("darkslategray1","orange"))  + xlab('') +  ylab('') + RotatedAxis()  +  theme(text=element_text(family = "FreeSerif" ))
p #+ ggtitle("Stem Markers")
dev.off()
###################################################################################################################


# DotPlots per Cluster
levels(Lgr5Cre_MERGED_Renamed) <- c('Stem I', 'Stem II', 'Ent.Progenitor I', 'Ent.Progenitor II / TA', 'Ent.Progenitor III', 'Enterocyte Immature', 'Enterocyte Mature', 'Goblet I', 'Goblet II', 'Goblet III', 'Paneth', 'Tuft', 'Enteroendocrine I', 'Enteroendocrine II', 'Unclassified') + RotatedAxis()
pdf("Enterocyte_Immature Markers.pdf", width=8, height=5)
p =  DotPlot(Lgr5Cre_MERGED_Renamed,features = c("Reg3g", "Gsdmc4", "Prss32", "Krt8"),cols = c("darkslategray1","darkorange1"))  + xlab('Gene') +  ylab('')
p + ggtitle("Enterocyte Immature Markers") + RotatedAxis()
dev.off()

pdf("Enterocyte_Mature Markers.pdf", width=10, height=5)
p = DotPlot(Lgr5Cre_MERGED_Renamed,features = c("Elf3","Sis","Fabp1","Hnf4aos","Hnf4a", "Hnf4g", "Tmigd1","Fabp6","Slc51b","Slc51a","Mep1a","Fam151a","Naaladl1","Slc34a2","Plb1","Nudt4","Dpep1","Pmp22","Xpnpep2","Muc3","Neu1","Clec2h","Phgr1","Prss30","Aldob","Alpi","Apoa1","Apoa4","Lct"), cols = c("darkslategray1","darkorange1"))  + xlab('Gene') +  ylab('') + RotatedAxis()
p + ggtitle("Enterocyte Mature Markers")
dev.off()

pdf("Enterocyte Progenitor Markers.pdf", width=9, height=5)
p = DotPlot(Lgr5Cre_0.1.3.4.5,features = c("Ccnb1","Cdc20","Cenpa","Cdkn3","Cdc25c","Ccnb2","Kif22","Ube2c","Sapcd2","Rbp7","Ccna2","Aurka","Cdkn2d","Kif23","Nek2","Birc5","Plk1","Tacc3","Melk","Cps1"),cols = c("darkslategray1","darkorange1"))  + xlab('Gene') +  ylab('') + RotatedAxis()
p + ggtitle("Enterocyte Progenitor Markers")
dev.off()

pdf("Goblet Markers.pdf", width=8.5, height=5)
p = DotPlot(Lgr5Cre_MERGED_Renamed,features = c("Muc2","Spdef","Foxa1","Agr2","Spink4","Fcgbp","Tff3","Zg16","Clca1","Ccl6","Klk1","Tpsg1","Ccl9","Txndc5","Tspan13","Atoh1","Lrrc26","Clca3a1","Klf4"), cols = c("darkslategray1","darkorange1"))  + xlab('Gene') +  ylab('') + RotatedAxis()
p + ggtitle("Goblet Markers")
dev.off()

pdf("Paneth Markers.pdf", width=7.5, height=5)
p = DotPlot(Lgr5Cre_MERGED_Renamed,features = c("Lyz1","Mmp7","Dll4","Sox9","Gfi1","Gm14851","Defa21","Defa22","Defa17","Defa24","Defa3","Mptx2","Ang4"), cols = c("darkslategray1","darkorange1"))  + xlab('Gene') +  ylab('') + RotatedAxis()
# Gene Gm15284 & Defa-rs1 excluded as there are not in the dataset 
p + ggtitle("Paneth Markers")
dev.off()

pdf("Enteroendocrine Markers.pdf", width=10, height=5)
p = DotPlot(Lgr5Cre_MERGED_Renamed,features = c("Gfi1","Neurog3","Neurod1","Chga","Chgb","Isl1","Arx","Pax6","Foxa2","Sst","Gck","Gcg","Tph1","Pyy","Gfra3","Cpe","Tac1","Fam183b", "Hmgn3","Cck","Fev","Gch1","Pcsk1n", "Bex2","Vwa5b2","Nkx2-2","Marcksl1","Neurod2","Insm1"), cols = c("darkslategray1","darkorange1"))  + xlab('Gene') +  ylab('') + RotatedAxis()
# Gene Ngfrap1 excluded. It can not be found in the dataset
p + ggtitle("Enteroendocrine Markers")
dev.off()

pdf("Stem Markers.pdf", width=9, height=5)
p = DotPlot(Lgr5Cre_0.1.3.4.5,features = c("Lgr5","Ascl2","Olfm4","Prom1","Axin2","Fzd2","Fzd7","Lrp5","Lrp6","Notch1","Hes1","Smo","Yap1","Igfbp4","Bex1","Gkn3","Slc12a2"), cols = c("darkslategray1","darkorange1"))  + xlab('Gene') +  ylab('') + RotatedAxis()
p + ggtitle("Stem Markers")
dev.off()

pdf("Tuft Markers.pdf", width=9, height=5)
p = DotPlot(Lgr5Cre_MERGED_Renamed,features = c("Dclk1","Ptprc","Avil","Lrmp","Alox5ap","Rgs13","Sh2d6","Ltc4s","Hck","Cd24a","Trpm5","Kctd12","Aldh2","Il13ra1","Gng13","Tmem176a","Skap2","Ptpn6","Ly6g6f","Fyb","Adh1","Gfi1b","Il25"), cols = c("darkslategray1","darkorange1"))  + xlab('Gene') +  ylab('')+ RotatedAxis()
p + ggtitle("Tuft Markers")
dev.off()

pdf("TA Markers.pdf", width=5, height=5)
p = DotPlot(Lgr5Cre_0.1.3.4.5,features = c("Stmn1", "Tubb5"),cols = c("darkslategray1","darkorange1"))  + xlab('Gene') +  ylab('') + RotatedAxis()
p + ggtitle("TA Markers")
dev.off()
#########################################3

pdf("Enterocyte_Immature Markers.pdf", width=15, height=8)
p =  DotPlot(Lgr5Cre_0.1.3.4.5_Renamed,features = c("Reg3g", "Gsdmc4", "Prss32", "Krt8"),cols = c("blue","orange"))
p + ggtitle("Enterocyte Immature Markers") + RotatedAxis()
dev.off()

pdf("Enterocyte_Mature Markers.pdf", width=15, height=8)
p = DotPlot(Lgr5Cre_0.1.3.4.5_Renamed,features = c("Elf3","Sis","Fabp1","Hnf4aos","Hnf4a", "Hnf4g", "Tmigd1","Fabp6","Slc51b","Slc51a","Mep1a","Fam151a","Naaladl1","Slc34a2","Plb1","Nudt4","Dpep1","Pmp22","Xpnpep2","Muc3","Neu1","Clec2h","Phgr1","Prss30","Aldob","Alpi","Apoa1","Apoa4","Lct"),cols = c("blue","orange")) + RotatedAxis()
p + ggtitle("Enterocyte Mature Markers")
dev.off()

pdf("Enterocyte Progenitor Markers.pdf", width=8, height=6)
p = DotPlot(Lgr5Cre_0.1.3.4.5,features = c("Ccnb1","Cdc20","Cenpa","Cdkn3","Cdc25c","Ccnb2","Kif22","Ube2c","Sapcd2","Rbp7","Ccna2","Aurka","Cdkn2d","Kif23","Nek2","Birc5","Plk1","Tacc3","Melk","Cps1"),cols = c("light grey","red")) + RotatedAxis()
p + ggtitle("Enterocyte Progenitor Markers")
dev.off()

pdf("Goblet Markers.pdf", width=15, height=8)
p = DotPlot(Lgr5Cre_0.1.3.4.5_Renamed,features = c("Muc2","Spdef","Foxa1","Agr2","Spink4","Fcgbp","Tff3","Zg16","Clca1","Ccl6","Klk1","Tpsg1","Ccl9","Txndc5","Tspan13","Atoh1","Lrrc26","Clca3a1","Klf4"),cols = c("blue","orange")) + RotatedAxis()
p + ggtitle("Goblet Markers")
dev.off()

pdf("Paneth Markers.pdf", width=15, height=8)
p = DotPlot(Lgr5Cre_0.1.3.4.5,features = c("Lyz1","Mmp7","Dll4","Sox9","Gfi1","Gm14851","Defa21","Defa22","Defa17","Defa24","Defa3","Mptx2","Ang4"),cols = c("blue","orange")) + RotatedAxis()
# Gene Gm15284 & Defa-rs1 excluded as there are not in the dataset 
p + ggtitle("Paneth Markers")
dev.off()

pdf("Enteroendocrine Markers.pdf", width=15, height=8)
p = DotPlot(Lgr5Cre_0.1.3.4.5,features = c("Gfi1","Neurog3","Neurod1","Chga","Chgb","Isl1","Arx","Pax6","Foxa2","Sst","Gck","Gcg","Tph1","Pyy","Gfra3","Cpe","Tac1","Fam183b", "Hmgn3","Cck","Fev","Gch1","Pcsk1n", "Bex2","Vwa5b2","Nkx2-2","Marcksl1","Neurod2","Insm1"),cols = c("blue","orange")) + RotatedAxis()
# Gene Ngfrap1 excluded. It can not be found in the dataset
p + ggtitle("Enteroendocrine Markers")
dev.off()

pdf("Stem Markers.pdf", width=15, height=8)
p = DotPlot(Lgr5Cre_0.1.3.4.5,features = c("Lgr5","Ascl2","Olfm4","Prom1","Axin2","Fzd2","Fzd7","Lrp5","Lrp6","Notch1","Hes1","Smo","Yap1","Igfbp4","Bex1","Gkn3","Slc12a2"),cols = c("blue","orange")) + RotatedAxis()
p + ggtitle("Stem Markers")
dev.off()

pdf("Tuft Markers.pdf", width=15, height=8)
p = DotPlot(Lgr5Cre_0.1.3.4.5,features = c("Dclk1","Ptprc","Avil","Lrmp","Alox5ap","Rgs13","Sh2d6","Ltc4s","Hck","Cd24a","Trpm5","Kctd12","Aldh2","Il13ra1","Gng13","Tmem176a","Skap2","Ptpn6","Ly6g6f","Fyb","Adh1","Gfi1b","Il25"),cols = c("blue","orange")) + RotatedAxis()
p + ggtitle("Tuft Markers")
dev.off()

pdf("TA Markers.pdf", width=15, height=8)
p = DotPlot(Lgr5Cre_0.1.3.4.5,features = c("Stmn1", "Tubb5"),cols = c("blue","orange")) + RotatedAxis()
p + ggtitle("TA Markers")
dev.off()

pdf("Cdk2 Marker Clusters.pdf", width=15, height=8)
p = DotPlot(Lgr5Cre_0.1.3.4.5_Renamed,features = c("Cdk2"),cols = c("blue","orange")) + RotatedAxis()
p + ggtitle("Cdk2 Marker")
dev.off()

# Rename UMAP

# Umap renamed cluster
pdf("Umap_renamed_Clusterd Markers.pdf", width=9.5, height=7)
Lgr5Cre_0.1.3.4.5_Renamed=RenameIdents(Lgr5Cre_0.1.3.4.5,  `0` = "Stem I", `1` = "Ent.Progenitor / TA", `2` = "Ent.Progenitor II", `3` = "Stem II", `4` = "Ent.Progenitor I", `5` = "Stem S phase", `6` = "Ent.Progenitor III", `7` = "Goblet")
DimPlot(Lgr5Cre_0.1.3.4.5_Renamed, label = TRUE, pt.size = 0.55, label.size = 4.5)
dev.off()

# Umap plot merged
pdf("umapPlot_Lgr5Cre_0.1.3.4.5_origident.pdf", width=9.5, height=7)
DimPlot(Lgr5Cre_0.1.3.4.5, reduction = "umap", group.by = "orig.ident", pt.size = 0.55)
dev.off()

# Split objects 
SplitObject(Lgr5Cre_0.1.3.4.5, split.by = "ident")
n_cells=(FetchData(Lgr5Cre_0.1.3.4.5, var=c("ident", "orig.ident")) %>% dplyr::count(ident, orig.ident) %>% tidyr::spread(ident, n))

# Umap plot merged replicates per condition
pdf("umapPlot_Lgr5Cre_0.1.3.4.5.conditions.pdf", width=12, height=6)
DimPlot(Lgr5Cre_0.1.3.4.5_Renamed,label=FALSE, split.by="orig.ident", ) + NoLegend()
dev.off()

md = Lgr5Cre_0.1.3.4.5_Renamed@meta.data %>% as.data.table()
md[, .N, by = c("orig.ident", "seurat_clusters")]

metadata_cells_per_cluster = md[, .N, by = c("orig.ident", "seurat_clusters")] %>% dcast(., orig.ident ~ seurat_clusters, value.var = "N")
write.table(metadata_cells_per_cluster, file = "metadata_cells_per_cluster.tsv", sep = "\t", row.names = TRUE)

##################################################################################################################################################################################################################

# Cell cycle
s.genes <- cc.genes$s.genes
s.genes <- tolower(s.genes)
s.genes = str_to_title(s.genes)

g2m.genes <- cc.genes$g2m.genes
g2m.genes <- tolower(g2m.genes)
g2m.genes = str_to_title(g2m.genes)


# Assign Cell-Cycle scores
Lgr5Cre_0.1.3.4.5_Renamed <- CellCycleScoring(Lgr5Cre_0.1.3.4.5_Renamed, s.features = s.genes, g2m.features = g2m.genes, set.ident = TRUE)

pdf("PCA on Cell Cycle Genes.pdf", width = 10, height = 8)
Lgr5Cre_0.1.3.4.5_Renamed <- RunPCA(Lgr5Cre_0.1.3.4.5_Renamed, features = c(s.genes, g2m.genes))
DimPlot(Lgr5Cre_0.1.3.4.5_Renamed)
dev.off()


##################################################################################################################################################################################################################

# Calculate Coefficient of Variability in gene expression

# create two matrix file for gene count per cell (KO and WT)
# WT
Lgr5Cre_01345_WT=subset(Lgr5Cre_0.1.3.4.5, subset = orig.ident == "Lgr5Cre")
# KO
Lgr5Cre_01345_KO=subset(Lgr5Cre_0.1.3.4.5, subset = orig.ident == "Setdb1KO")

# Save file with gene expression per cell type per condition
# WT
write.table(Lgr5Cre_01345_WT@assays[["RNA"]]@counts, file='WT_Gene_Count_per_Cell.tmp', quote=FALSE, sep='\t', col.names = TRUE)
# KO
write.table(Lgr5Cre_01345_KO@assays[["RNA"]]@counts, file='KO_Gene_Count_per_Cell.tmp', quote=FALSE, sep='\t', col.names = TRUE)

# Read the filtered file
KO_matrix_Filtered = read.table("/home/dimbo/Desktop/a/KO_Gene_Count_per_Cell.tmp", sep = "\t", header = TRUE, row.names = 1 )
WT_matrix_Filtered = read.table("/home/dimbo/Desktop/a/WT_Gene_Count_per_Cell.tmp", sep = "\t", header = TRUE, row.names = 1 ) 

# calculate coefficient variability and add results in the file
KO_matrix_Filtered$cv  <- apply(KO_matrix_Filtered, 1,  function(x) sd(x) / mean(x) * 100)
WT_matrix_Filtered$cv  <- apply(WT_matrix_Filtered, 1,  function(x) sd(x) / mean(x) * 100)

# send back to bash for file manipulation and filtering
write.table(KO_matrix_Filtered, file = "KO.tmp", row.names = FALSE, sep = "\t")
write.table(WT_matrix_Filtered, file = "WT.tmp", row.names = FALSE, sep = "\t")

coefficient_variation = read.table("/home/dimbo/Desktop/a/coefficient_variation.tsv", sep = "\t", header = TRUE)
colnames(coefficient_variation) = c("Setdb1KO", "Lgr5Cre")

pdf("boxplot_cv.pdf")
colors <- c("chartreuse4","firebrick3")
boxplot(coefficient_variation, ylab = "coefficient variation", col = colors, main = "Meta-Clusters", outline = FALSE)
dev.off()


##################################################################################################################################################################################################################


# Mann-Whitney-Wilcoxon Test

# Read the values of coefficient of variation for KO and WT
#ko_values = read.csv(file = "/media/dimbo/10T/data/talianidis_data/scRNA_seq/Talianidis_GFP_2_fixed/analysis/Seurat/coefficient_variability/TEST/", header = FALSE)
#wt_values = read.csv(file = "/media/dimbo/10T/data/talianidis_data/scRNA_seq/Talianidis_GFP_2_fixed/analysis/Seurat/coefficient_variability/TEST/wt", header = FALSE)
# convert list to double
#ko_values = as.numeric(unlist(ko_values))
#wt_values = as.numeric(unlist(wt_values))
# Run Mann-Whitney-Wilcoxon Test
wilcox.test(coefficient_variation$Setdb1KO, coefficient_variation$Lgr5Cre)

##################################################################################################################################################################################################################

# Trajectory analysis

monocle_Lgr5Cre_MERGED <- as.cell_data_set(Lgr5Cre_MERGED)
monocle_Lgr5Cre_MERGED <- cluster_cells(cds = monocle_Lgr5Cre_MERGED, reduction_method = "UMAP")
monocle_Lgr5Cre_MERGED <- learn_graph(monocle_Lgr5Cre_MERGED, use_partition = TRUE)
monocle_Lgr5Cre_MERGED <- order_cells(monocle_Lgr5Cre_MERGED,reduction_method = "UMAP")


pdf("trajectory_Lgr5Cre_Merged.pdf", width = 12, height = 8)
plot_cells(monocle_Lgr5Cre_MERGED,
           color_cells_by = "pseudotime",
           graph_label_size=5,
           show_trajectory_graph = FALSE,
           cell_size = 0.55)
dev.off()

# SubClusters

monocle_Lgr5Cre_subset <- as.cell_data_set(Lgr5Cre_0.1.3.4.5)
monocle_Lgr5Cre_subset <- cluster_cells(cds = monocle_Lgr5Cre_subset, reduction_method = "UMAP")
monocle_Lgr5Cre_subset <- learn_graph(monocle_Lgr5Cre_subset, use_partition = TRUE)
monocle_Lgr5Cre_subset <- order_cells(monocle_Lgr5Cre_subset,reduction_method = "UMAP")


pdf("trajectory_MERGED_subset.pdf", width = 14, height = 8)
plot_cells(monocle_Lgr5Cre_subset,
           color_cells_by = "pseudotime",
           graph_label_size=5,
           show_trajectory_graph = FALSE,
           cell_size = 0.55,
)
dev.off()

###############################################

# Trajectroy analysis on split conditions
ko = subset(x = Lgr5Cre_MERGED, subset = orig.ident == "Setdb1KO")
wt = subset(x = Lgr5Cre_MERGED, subset = orig.ident == "Lgr5Cre")


monocle_ko <- as.cell_data_set(ko)
monocle_ko <- cluster_cells(cds = monocle_ko, reduction_method = "UMAP")
monocle_ko <- learn_graph(monocle_ko, use_partition = TRUE)
monocle_ko <- order_cells(monocle_ko,reduction_method = "UMAP")


pdf("trajectory_KO.pdf", width = 14, height = 8)
plot_cells(monocle_ko,
           color_cells_by = "pseudotime",
           graph_label_size=5,
           show_trajectory_graph = FALSE,
           cell_size = 0.55)
dev.off()


monocle_wt <- as.cell_data_set(wt)
monocle_wt <- cluster_cells(cds = monocle_wt, reduction_method = "UMAP")
monocle_wt <- learn_graph(monocle_wt, use_partition = TRUE)
monocle_wt <- order_cells(monocle_wt,reduction_method = "UMAP")


pdf("trajectory_WT.pdf", width = 14, height = 8)
plot_cells(monocle_wt,
           color_cells_by = "pseudotime",
           graph_label_size=5,
           show_trajectory_graph = FALSE,
           cell_size = 0.55)
dev.off()



###############################################################################

# SubClusters

# subset clusters for KO
KO_012345=subset(x = Lgr5Cre_0.1.3.4.5_Renamed, subset = orig.ident == "Setdb1KO")
WT_012345=subset(x = Lgr5Cre_0.1.3.4.5_Renamed, subset = orig.ident == "Lgr5Cre")

# Setdb1KO
monocle_ko <- as.cell_data_set(KO_012345)
monocle_ko <- cluster_cells(cds = monocle_ko, reduction_method = "UMAP")
monocle_ko <- learn_graph(monocle_ko, use_partition = TRUE)
monocle_ko <- order_cells(monocle_ko,reduction_method = "UMAP")

pdf("trajectory_Subset_KO.pdf", width = 8, height = 6)
plot_cells(monocle_ko,
           color_cells_by = "pseudotime",
           graph_label_size=5,
           show_trajectory_graph = FALSE,
           cell_size = 0.6) + theme(plot.title = element_text(hjust = 0.5)) +
  labs(title = "")
dev.off()

# Lgr5Cre
monocle_wt <- as.cell_data_set(WT_012345)
monocle_wt <- cluster_cells(cds = monocle_wt, reduction_method = "UMAP")
monocle_wt <- learn_graph(monocle_wt, use_partition = TRUE)
monocle_wt <- order_cells(monocle_wt,reduction_method = "UMAP")

pdf("trajectory_Subset_WT.pdf", width = 8, height = 6)
plot_cells(monocle_wt,
           color_cells_by = "pseudotime",
           graph_label_size=5,
           show_trajectory_graph = FALSE,
           cell_size = 0.6) + theme(plot.title = element_text(hjust = 0.5)) +
  labs(title = "")
dev.off()

############################################################################################

# Identification of highly variable features between clusters (Stem I and Stem II)

# Subset stem 0 and 1 from Lgr5Cre 0,1,3,4,5
Lgr5Cre_0.1 = subset(Lgr5Cre_0.1.3.4.5_Renamed, idents = c("Stem I", "Stem II"))

# Identification of highly variable features between Stem I and Stem II
Lgr5Cre_0.1 <- FindVariableFeatures(Lgr5Cre_0.1, selection.method = "vst", nfeatures = 2000)

# Identify the 10 most highly variable genes
top10 <- head(VariableFeatures(Lgr5Cre_0.1), 10)
top50 <- head(VariableFeatures(Lgr5Cre_0.1), 50)

# plot variable features with and without labels
plot1 <- VariableFeaturePlot(Lgr5Cre_0.1)
plot2 <- LabelPoints(plot = plot1, points = top50, repel = TRUE)
pdf("top_50_mvf_StemI_StemII.pdf", width = 14, height = 8)
plot2
dev.off()

pdf("STEM_CLUSTERS.pdf", width=7, height=6)
DimPlot(Lgr5Cre_0.1)
dev.off()

### SPLIT Lgr5cre_0.1 to KO and WT
# SPLIT OBJECT OF STEM I AND STEM II IN KO AND WT
SplitObject(Lgr5Cre_0.1, split.by = "ident")
n_cells=(FetchData(Lgr5Cre_0.1, var=c("ident", "orig.ident")) %>% dplyr::count(ident, orig.ident) %>% tidyr::spread(ident, n))

Lgr5Cre_0.1_Renamed_WT=subset(Lgr5Cre_0.1, subset = orig.ident == "Lgr5Cre")
Lgr5Cre_0.1_Renamed_KO=subset(Lgr5Cre_0.1, subset = orig.ident == "Setdb1KO")

pdf("STEM_CLUSTERS_WT.pdf", width=7, height=6)
DimPlot(Lgr5Cre_0.1_Renamed_WT, pt.size = 0.55) + theme(plot.title = element_text(hjust = 0.5)) +
  labs(title = "Stem Clusters WT")
dev.off()

pdf("STEM_CLUSTERS_KO.pdf", width=7, height=6)
DimPlot(Lgr5Cre_0.1_Renamed_KO, pt.size = 0.55) + theme(plot.title = element_text(hjust = 0.5)) +
  labs(title = "Stem Clusters Setdb1-KO")
dev.off()


###########################

# Umap renamed cluster
#Lgr5Cre_0.1_RENAMED=RenameIdents(Lgr5Cre_0.1,  `0` = "Stem II", `3` = "Stem I")

# Find differentially expressed genes between cluster 0 and 1 (FIND ALL MARKERS)
Lgr5Cre_0.1.markers <- FindAllMarkers(Lgr5Cre_0.1, only.pos = TRUE, min.pct = 0.25, logfc.threshold = 0.37)
Lgr5Cre_0.1.markers %>%
  group_by(cluster) %>%
  slice_max(n = 2, order_by = avg_log2FC)

Lgr5Cre_0.1.markers %>%
  group_by(cluster) %>%
  top_n(n = 15, wt = avg_log2FC) -> top10
pdf("heatmap_stem1_vs_stem2.pdf")
DoHeatmap(Lgr5Cre_0.1, features = top10$gene, group.colors = c("indianred1", "turquoise2"), size = 4.5, group.bar.height = 0.014 ) + NoLegend() + scale_fill_gradientn(colors = c("deepskyblue4", "black", "orange")) + theme(text = element_text(size = 12)) +  theme(text=element_text(family="FreeSerif"))
dev.off()

write.table(Lgr5Cre_0.1.markers, file = "STEMI_vs_STEMII_markers.tsv", sep = "\t", row.names = FALSE)

######################## FIND dif expressed genes between I and II in WT
# Find differentially expressed genes between cluster 0 and 1 (FIND ALL MARKERS)
WT_Stem.markers <- FindAllMarkers(Lgr5Cre_0.1_Renamed_WT, only.pos = TRUE, min.pct = 0.25, logfc.threshold = 0.37)
WT_Stem.markers %>%
  group_by(cluster) %>%
  slice_max(n = 2, order_by = avg_log2FC)

WT_Stem.markers %>%
  group_by(cluster) %>%
  top_n(n = 15, wt = avg_log2FC) -> top10
pdf("WT_STEM_MARKERS.pdf")
DoHeatmap(Lgr5Cre_0.1_Renamed_WT, features = top10$gene, group.colors = c("indianred1", "turquoise2"), size = 4.5, group.bar.height = 0.014 ) + NoLegend() + scale_fill_gradientn(colors = c("deepskyblue4", "black", "orange")) +  theme(text = element_text(size = 12)) +  theme(text=element_text(family="FreeSerif"))
dev.off()

write.table(WT_Stem.markers, file = "WT_STEMI_VS_STEMII_MARKERS.tsv", sep = "\t", row.names = FALSE)


######################## FIND dif expressed genes between I and II in KO
# Find differentially expressed genes between cluster 0 and 1 (FIND ALL MARKERS)
KO_Stem.markers <- FindAllMarkers(Lgr5Cre_0.1_Renamed_KO, only.pos = TRUE, min.pct = 0.25, logfc.threshold = 0.37)
KO_Stem.markers %>%
  group_by(cluster) %>%
  slice_max(n = 2, order_by = avg_log2FC)

KO_Stem.markers %>%
  group_by(cluster) %>%
  top_n(n = 15, wt = avg_log2FC) -> top10
pdf("heatmap_KO_STEM_MARKERS.pdf")
DoHeatmap(Lgr5Cre_0.1_Renamed_KO, features = top10$gene, group.colors = c("indianred1", "turquoise2"), size = 4.5, group.bar.height = 0.014 ) + NoLegend() + scale_fill_gradientn(colors = c("deepskyblue4", "black", "orange")) +  theme(text = element_text(size = 12)) +  theme(text=element_text(family="FreeSerif"))
dev.off()

write.table(KO_Stem.markers, file = "KO_STEMI_vs_STEMII_markers.tsv", sep = "\t", row.names = FALSE)


############################################################################################################################################

# violin and nebulosa plot in WT for H2 FAMILY GENES and top 5 markers
pdf("H2_markers_WT.pdf", width = 14, height = 12)
VlnPlot(Lgr5Cre_0.1_Renamed_WT, features = c("H2-K1", "H2-D1", "H2-Aa", "H2-Ab1", "H2-Eb1","H2-DMa", "H2-DMb1", "H2-T23"), log = TRUE, pt.size = 0) 
dev.off()

pdf("Nebulosa_H2_Genessss.pdf", width = 14, height = 12)
plot_density(Lgr5Cre_0.1_Renamed_WT,c("H2-K1", "H2-D1", "H2-Aa", "H2-Ab1", "H2-Eb1","H2-DMa", "H2-DMb1", "H2-T23"))
dev.off()

################################################################################################

# violin and nebulosa plot in KO for H2 FAMILY GENES and top 5 markers
pdf("H2_markers_KO.pdf", width = 14, height = 9)
VlnPlot(Lgr5Cre_0.1_Renamed_KO, features = c("H2-Aa", "H2-Eb1", "H2-Ab1", "H2-DMa", "H2-D1","H2-K1"), log = TRUE, pt.size = 0) 
dev.off()

pdf("Nebulosa_H2_Genessss_KO.pdf", width = 14, height = 9)
plot_density(Lgr5Cre_0.1_Renamed_KO,c("H2-Aa", "H2-Eb1", "H2-Ab1", "H2-DMa", "H2-D1","H2-K1"))
dev.off()

################################################################################################

############################################################################################################################################
############################################################################################################################################


# Differential expression across stem I (WT vs KO) and stem II (WT vs KO)

# CLUSTER 0 
cluster_StemI <- subset(Lgr5Cre_0.1, idents = "Stem I")

SplitObject(cluster_StemI, split.by = "ident")
n_cells=(FetchData(cluster_StemI, var=c("ident", "orig.ident")) %>% dplyr::count(ident, orig.ident) %>% tidyr::spread(ident, n))

md = cluster_StemI@meta.data %>% as.data.table()
md[, .N, by = c("orig.ident", "seurat_clusters")]
md[, .N, by = c("orig.ident", "seurat_clusters")] %>% dcast(., orig.ident ~ seurat_clusters, value.var = "N")

#KO
Idents(cluster_StemI) = cluster_StemI$orig.ident
KOEXPRESSED <- FindMarkers(cluster_StemI, ident.1 = "Setdb1KO", ident.2 = "Lgr5Cre", logfc.threshold = 0.25, only.pos = T)

#WT
Idents(cluster_StemI) = cluster_StemI$orig.ident
WTEXPRESSED <- FindMarkers(cluster_StemI, ident.1 = "Lgr5Cre", ident.2 = "Setdb1KO", logfc.threshold = 0.25, only.pos = T)


write.table(WTEXPRESSED, file = "stem_I_WTEXPRESSED.tsv", sep = "\t", row.names = TRUE)

write.table(KOEXPRESSED, file = "stem_I_KOEXPRESSED.tsv", sep = "\t", row.names = TRUE)



# CLUSTER 1
cluster_StemII <- subset(Lgr5Cre_0.1, idents = "Stem II")

SplitObject(cluster_StemII, split.by = "ident")
n_cells=(FetchData(cluster_StemII, var=c("ident", "orig.ident")) %>% dplyr::count(ident, orig.ident) %>% tidyr::spread(ident, n))

md = cluster_StemII@meta.data %>% as.data.table()
md[, .N, by = c("orig.ident", "seurat_clusters")]
md[, .N, by = c("orig.ident", "seurat_clusters")] %>% dcast(., orig.ident ~ seurat_clusters, value.var = "N")

#KO
Idents(cluster_StemII) = cluster_StemII$orig.ident
KOEXPRESSED <- FindMarkers(cluster_StemII, ident.1 = "Setdb1KO", ident.2 = "Lgr5Cre", logfc.threshold = 0.25, only.pos = T)

#WT
Idents(cluster_StemII) = cluster_StemII$orig.ident
WTEXPRESSED <- FindMarkers(cluster_StemII, ident.1 = "Lgr5Cre", ident.2 = "Setdb1KO", logfc.threshold = 0.25, only.pos = T)


write.table(WTEXPRESSED, file = "stem_II_WTEXPRESSED.tsv", sep = "\t", row.names = TRUE)

write.table(KOEXPRESSED, file = "stem_II_KOEXPRESSED.tsv", sep = "\t", row.names = TRUE)


####################################################################
# PLOT THE MARKERS THAT ARE DIFFERENTIALLY EXPRESSED FOR WT VS KO IN STEM I

##################### FOR WT ######################
pdf("Dot Plot_StemI_WT_Exp.pdf", width=10, height=8)
p = DotPlot(cluster_StemI, features = c("Ceacam10","H2-Aa","H2-Ab1","Dmbt1","Gm43305","Gm47283","H2-D1","H2-K1","2210407C18Rik","Cd74"), group.by = "orig.ident" ,cols = c("deepskyblue","orange")) + RotatedAxis()
p + ggtitle("Stem I - Lgr5Cre Top 10 Features")
dev.off()

pdf("Dot Plot_StemII_WT_Exp.pdf", width=10, height=8)
p = DotPlot(cluster_StemII, features = c("Dmbt1", "Gm47283",  "Gm43305",   "Ceacam10", "2210407C18Rik",  "H2-Aa", "H2-Ab1",  "H2-K1",  "H2-D1","Cd74"), group.by = "orig.ident" ,cols = c("deepskyblue","orange")) + RotatedAxis()
p + ggtitle("Stem II - Lgr5Cre Top 10 Features")
dev.off()

##################### FOR KO ######################
pdf("Dot Plot_StemI_KO_Exp.pdf", width=10, height=8)
p = DotPlot(cluster_StemI, features = c( "Rnase4",   "Alad", "Ly6e","Defa21","Defa22",  "Defa29",  "Defa24",  "Defa30",  "Phgr1", "Gm14851"  
                                         
), group.by = "orig.ident" ,cols = c("deepskyblue","orange")) + RotatedAxis()
p + ggtitle("Stem I - Setdb1KO Top 10 Features")
dev.off()
#########################################
pdf("Dot Plot_StemII_KO_Exp.pdf", width=10, height=8)
p = DotPlot(cluster_StemII, features = c( "Sycn", "Defa29",  "Defa22", "Defa21", "Defa24","Defa30", "Phgr1", "Rnase",  "Gm14851"
                                          
), group.by = "orig.ident" ,cols = c("deepskyblue","orange")) + RotatedAxis()
p + ggtitle("Stem II - Setdb1KO Top 10 Features")
dev.off()































# Plot violin (STEM II markers expressed)
pdf("Violin_Stem2_MARKERS_EXPRESSED_(H2).pdf", width = 14, height = 12)
VlnPlot(Lgr5Cre_0.1, features = c("H2-K1", "H2-D1", "H2-Aa", "H2-Ab1", "H2-Eb1","H2-DMa", "H2-DMb1", "H2-T23"), log = TRUE, pt.size = 0)
dev.off()

# Plot violin (STEM II markers expressed)
pdf("Violin_Stem2_MARKERS_EXPRESSED.pdf", width = 14, height = 10)
VlnPlot(Lgr5Cre_0.1_RENAMED, features = c("Ceacam10" ,"Bex1", "Mgam", "Gm5485", "Cyba", "Cd74"), log = TRUE, pt.size = 0)
dev.off()

# Plot violin (STEM II markers expressed)
pdf("Violin_Stem1_MARKERS_EXPRESSED.pdf", width = 14, height = 10)
VlnPlot(Lgr5Cre_0.1_RENAMED, features = c("Gkn3", "Clca4b", "Ttr", "Hmgcs2", "Onecut2", "Jaml", "Acot1"), log = TRUE, pt.size = 0)
dev.off()


# Plot feature in H2
pdf("featureplot_H2.pdf", width = 14, height = 12)
FeaturePlot(Lgr5Cre_0.1, features = c("H2-K1", "H2-D1", "H2-Aa", "H2-Ab1", "H2-Eb1","H2-DMa", "H2-DMb1", "H2-T23"), cols = c("cornsilk" ,"blue"))
dev.off()

##################################################################################################################################################################################################################

# SPLIT OBJECT OF STEM I AND STEM II IN KO AND WT
SplitObject(Lgr5Cre_0.1_RENAMED, split.by = "ident")
n_cells=(FetchData(Lgr5Cre_0.1_RENAMED, var=c("ident", "orig.ident")) %>% dplyr::count(ident, orig.ident) %>% tidyr::spread(ident, n))

Lgr5Cre_0.1_Renamed_WT=subset(Lgr5Cre_0.1_RENAMED, subset = orig.ident == "Lgr5Cre")
Lgr5Cre_0.1_Renamed_KO=subset(Lgr5Cre_0.1_RENAMED, subset = orig.ident == "Setdb1KO")

# Find differentially expressed genes between cluster 0 and 1 (FIND ALL MARKERS) ************* ON KO AND WT SEPARATELY
# KO
Lgr5Cre_0.1.markers_KO <- FindAllMarkers(Lgr5Cre_0.1_Renamed_KO, only.pos = TRUE, min.pct = 0.25, logfc.threshold = 0.37)
Lgr5Cre_0.1.markers_KO %>%
  group_by(cluster) %>%
  slice_max(n = 2, order_by = avg_log2FC)

Lgr5Cre_0.1.markers_KO %>%
  group_by(cluster) %>%
  top_n(n = 60, wt = avg_log2FC) -> top10
pdf("heatmap_stem1_vs_stem2_KO_CONDITION.pdf")
DoHeatmap(Lgr5Cre_0.1_Renamed_KO, features = top10$gene, group.colors = c("azure3", "azure4")) + NoLegend() + scale_fill_gradientn(colors = c("deepskyblue", "black", "orange")) + theme(text = element_text(size = 9))
dev.off()

# WT
# Find differentially expressed genes between cluster 0 and 1 (FIND ALL MARKERS) ************* ON KO AND WT SEPARATELY
Lgr5Cre_0.1.markers_WT <- FindAllMarkers(Lgr5Cre_0.1_Renamed_WT, only.pos = TRUE, min.pct = 0.25, logfc.threshold = 0.37)
Lgr5Cre_0.1.markers_WT %>%
  group_by(cluster) %>%
  slice_max(n = 2, order_by = avg_log2FC)

Lgr5Cre_0.1.markers_WT %>%
  group_by(cluster) %>%
  top_n(n = 75, wt = avg_log2FC) -> top10
pdf("heatmap_stem1_vs_stem2_WT_CONDITION.pdf")
DoHeatmap(Lgr5Cre_0.1_Renamed_WT, features = top10$gene, group.colors = c("azure3", "azure4")) + NoLegend() + scale_fill_gradientn(colors = c("deepskyblue", "black", "orange")) + theme(text = element_text(size = 8))
dev.off()

#################################################

# Differential expression across stem 0 (WT vs KO) and stem 1 (WT vs KO)

# CLUSTER 0
cluster0 <- subset(Lgr5Cre_0.1, idents = "Stem I")

SplitObject(cluster0, split.by = "ident")
n_cells=(FetchData(cluster0, var=c("ident", "orig.ident")) %>% dplyr::count(ident, orig.ident) %>% tidyr::spread(ident, n))

md = cluster0@meta.data %>% as.data.table()
md[, .N, by = c("orig.ident", "seurat_clusters")]
md[, .N, by = c("orig.ident", "seurat_clusters")] %>% dcast(., orig.ident ~ seurat_clusters, value.var = "N")

#KO
Idents(cluster0) = cluster0$orig.ident
KOEXPRESSED <- FindMarkers(cluster0, ident.1 = "Setdb1KO", ident.2 = "Lgr5Cre", logfc.threshold = 0.25, only.pos = T)

#WT
Idents(cluster0) = cluster0$orig.ident
WTEXPRESSED <- FindMarkers(cluster0, ident.1 = "Lgr5Cre", ident.2 = "Setdb1KO", logfc.threshold = 0.25, only.pos = T)


write.table(WTEXPRESSED, file = "STEM_I_WTEXPRESSED.tsv", sep = "\t", row.names = TRUE)

write.table(KOEXPRESSED, file = "STEM_I_KOEXPRESSED.tsv", sep = "\t", row.names = TRUE)



# CLUSTER 1
cluster1 <- subset(Lgr5Cre_0.1, idents = "Stem II")

SplitObject(cluster1, split.by = "ident")
n_cells=(FetchData(cluster0, var=c("ident", "orig.ident")) %>% dplyr::count(ident, orig.ident) %>% tidyr::spread(ident, n))

md = cluster1@meta.data %>% as.data.table()
md[, .N, by = c("orig.ident", "seurat_clusters")]
md[, .N, by = c("orig.ident", "seurat_clusters")] %>% dcast(., orig.ident ~ seurat_clusters, value.var = "N")

#KO
Idents(cluster1) = cluster1$orig.ident
KOEXPRESSED <- FindMarkers(cluster1, ident.1 = "Setdb1KO", ident.2 = "Lgr5Cre", logfc.threshold = 0.25, only.pos = T)

#WT
Idents(cluster1) = cluster1$orig.ident
WTEXPRESSED <- FindMarkers(cluster1, ident.1 = "Lgr5Cre", ident.2 = "Setdb1KO", logfc.threshold = 0.25, only.pos = T)


write.table(WTEXPRESSED, file = "STEM_II_WTEXPRESSED.tsv", sep = "\t", row.names = TRUE)

write.table(KOEXPRESSED, file = "STEM_II_KOEXPRESSED.tsv", sep = "\t", row.names = TRUE)



pdf("Violin Plot_STEM_1_KO.pdf", width=15, height=15)
VlnPlot(cluster1, features = c("Phgr1",
                               "Defa24",
                               "Defa21",
                               "Sycn",
                               "Defa22",
                               "Defa30",
                               "Gm14851",
                               "Rnase4",
                               "Defa29",
                               "Bex1",
                               "AY761184",
                               "Alad",
                               "Gm42031",
                               "Uqcr10"
), split.by = "orig.ident", pt.size = 0)
dev.off()



pdf("Violin Plot_STEM_1_WT.pdf", width=15, height=15)
VlnPlot(cluster1, features = c("Gm47283", "2210407C18Rik","Ifitm3",
                               "Ceacam10",
                               "Rplp0",
                               "Cd74",
                               "H2-Ab1",
                               "H2-Aa",
                               "H2-Eb1",
                               "mt-Co3",
                               "H2-K1",
                               "H2-D1",
                               "Gpx2",
                               "mt-Cytb"
), split.by = "orig.ident", pt.size = 0)
dev.off()



pdf("Violin Plot_STEM_0_WT.pdf", width=15, height=15)
VlnPlot(cluster0, features = c("Cd74",
                               "Rsrp1",
                               "Gm47283",
                               "Gm43305",
                               "Ceacam10",
                               "H2-Eb1",
                               "H2-Ab1",
                               "H2-Aa",
                               "Olfm4",
                               "Rplp0",
                               "Adh6a",
                               "Itm2b",
                               "Epcam",
                               "mt-Cytb"
), split.by = "orig.ident", pt.size = 0)
dev.off()

pdf("Violin Plot_STEM_0_KO.pdf", width=15, height=15)
VlnPlot(cluster0, features = c("Defa21",
                               "Defa22",
                               "Phgr1",
                               "Defa24",
                               "Ly6e",
                               "Defa30",
                               "Alad",
                               "Gm14851",
                               "Defa29",
                               "Rnase4",
                               "Smim24",
                               "Gm42031",
                               "AY761184",
                               "Rbm3"
), split.by = "orig.ident", pt.size = 0)
dev.off()
###############################################


pdf("Dotplot Plot_STEM_1_KO.pdf", width=10, height=8)
p = DotPlot(cluster1, features = c(                                   "AY761184",
                                                                      "Alad",
                                                                      "Bex1",
                                                                      "Defa21",
                                                                      "Defa22",
                                                                      "Defa24",
                                                                      "Defa29",
                                                                      "Defa30",
                                                                      "Gm14851",
                                                                      "Gm42031",
                                                                      "Phgr1",
                                                                      "Rnase4",
                                                                      "Sycn",
                                                                      "Uqcr10"
), group.by = "orig.ident" ,cols = c("deepskyblue","orange")) + RotatedAxis()
p + ggtitle("Stem Cluster 1 (Top 15 Features - Setdb1KO)")

dev.off()



pdf("Dot Plot_STEM_1_WT.pdf", width=10, height=8)
p = DotPlot(cluster1, features = c("Gm47283", "2210407C18Rik","Ifitm3",
                                   "Ceacam10",
                                   "Rplp0",
                                   "Cd74",
                                   "H2-Ab1",
                                   "H2-Aa",
                                   "H2-Eb1",
                                   "mt-Co3",
                                   "H2-K1",
                                   "H2-D1",
                                   "Gpx2",
                                   "mt-Cytb"
), group.by = "orig.ident" ,cols = c("deepskyblue","orange")) + RotatedAxis()
p + ggtitle("Stem Cluster 1 (Top 15 Features - WT)")
dev.off()


################################################################################################################


# STEM I


pdf("STEM_I_WT_VS_KO.pdf", width=10, height=3.9)
p = DotPlot(cluster0, features = c(
  #EXPRESSED IN WT
  
  "Cd74",
  "Ceacam10",
  "Clca3b",
  "Dmbt1",
  "Gkn3",
  "Gm43305",
  "Gm47283",
  "H2-Aa",
  "H2-Ab1",
  "H2-Eb1",
  "Itm2b",
  "Olfm4",
  "Pdgfa",
  "Rnase1",
  "Rsrp1",
  

  
  # EXPRESSED IN KO
  
  'AY761184',
  'Alad',
  'Defa21',
  'Defa22',
  'Defa24',
  'Defa29',
  'Defa30',
  'Gm14851',
  'Itln1',
  'Ly6e',
  'Phgr1',
  'Rnase4',
  'Smim24',
  'Tubb2b',
  'Zg16'
  
  
  
), group.by = "orig.ident" ,cols = c("darkslategray1","orange")) + RotatedAxis() + xlab('') +  ylab('') +  theme(text=element_text(family="FreeSerif"))
p 
dev.off()


####### STEM II

pdf("STEM_II_WT_VS_KO.pdf", width=10, height=3.9)
p = DotPlot(cluster1, features = c(
  #EXPRESSED IN WT

  
  "2210407C18Rik",
  "Cd74",
  "Ceacam10",
  "Dmbt1",
  "Gm43305",
  "Gm47283",
  "H2-Aa",
  "H2-Ab1",
  "H2-D1",
  "H2-Eb1",
  "H2-K1",
  "Ifitm3",
  "Pdia3",
  "Rsrp1",
  "mt-Cytb",
  
  # EXPRESSED IN KO

  "AY761184",
  'Alad',
  'Bex1',
  'Defa21',
  'Defa22',
  'Defa24',
  'Defa29',
  'Defa30',
  'Gm5485',
  'Gm14851',
  'Gm42031',
  'Ly6e',
  'Phgr1',
  'Rnase4',
  'Sycn'

  
), group.by = "orig.ident" ,cols = c("darkslategray1","orange")) + RotatedAxis() + xlab('') +  ylab('') +  theme(text=element_text(family="FreeSerif"))
p 
dev.off()











################################################################################################################



pdf("Dot Plot_STEM_0_KO.pdf", width=10, height=8)
p = DotPlot(cluster0, features = c("Defa21",
                                   "Defa22",
                                   "Phgr1",
                                   "Defa24",
                                   "Ly6e",
                                   "Defa30",
                                   "Alad",
                                   "Gm14851",
                                   "Defa29",
                                   "Rnase4",
                                   "Smim24",
                                   "Gm42031",
                                   "AY761184",
                                   "Rbm3"
), group.by = "orig.ident" ,cols = c("deepskyblue","orange")) + RotatedAxis()
p 
dev.off()

######################################################################################################################
######################################################################################################################
# NEBULOSA PLOTS

# STEM II EXPRESSED GENES IN WT
pdf("Nebulosa_H2_Genes.pdf", width = 12, height = 10)
plot_density(Lgr5Cre_0.1_Renamed_WT,c("H2-Aa",
"H2-Ab1",
"H2-D1",
"H2-DMa",
"H2-DMb1",
"H2-Eb1",
"H2-K1"))
dev.off()

# VIOLIN PLOTS
pdf("Violin_H2_Genes.pdf", width = 12, height = 10)
VlnPlot(Lgr5Cre_0.1_Renamed_WT, pt.size = 0,features = c("H2-Aa",
                                      "H2-Ab1",
                                      "H2-D1",
                                      "H2-DMa",
                                      "H2-DMb1",
                                      "H2-Eb1",
                                      "H2-K1"))
dev.off()


pdf("Dot Plot_STEM_0_KO.pdf", width=10, height=8)
p = DotPlot(cluster0, features = c("Defa21",
                                   "Defa22",
                                   "Phgr1",
                                   "Defa24",
                                   "Ly6e",
                                   "Defa30",
                                   "Alad",
                                   "Gm14851",
                                   "Defa29",
                                   "Rnase4",
                                   "Smim24",
                                   "Gm42031",
                                   "AY761184",
                                   "Rbm3"
), group.by = "orig.ident" ,cols = c("deepskyblue","orange")) + RotatedAxis()
p 
dev.off()

######################################################################################################################
######################################################################################################################
# NEBULOSA PLOTS    

# STEM I EXPRESSED GENES IN WT

pdf("Nebulosa_STEMI_Genes.pdf", width = 12, height = 10)
plot_density(Lgr5Cre_0.1_Renamed_WT,c(
  "Acot1",
  "Cda",
  "Dhrs4",
  "Fabp1",
  "Gkn3",
  "Hmgcs2",
  "Onecut2",
  "Prap1",
  "Ttr"))
dev.off()

# VIOLIN PLOTS
pdf("Violin_STEMI_Genes.pdf", width = 12, height = 10)
VlnPlot(Lgr5Cre_0.1_Renamed_WT, pt.size = 0,features = c(  "Acot1",
                                                           "Cda",
                                                           "Dhrs4",
                                                           "Fabp1",
                                                           "Gkn3",
                                                           "Hmgcs2",
                                                           "Onecut2",
                                                           "Prap1",
                                                           "Ttr"))
dev.off()


######################################################################################################################
######################################################################################################################

pdf("Nebulosa_H2_Genes.pdf", width = 14, height = 12)
plot_density(Lgr5Cre_0.1_RENAMED,c("H2-K1", "H2-D1", "H2-Aa", "H2-Ab1", "H2-Eb1","H2-DMa", "H2-DMb1", "H2-T23"))
dev.off()

pdf("Nebulosa_H2_Genes.pdf", width = 14, height = 12)
plot_density(Lgr5Cre_MERGED,c("H2-K1", "H2-D1", "H2-Aa", "H2-Ab1", "H2-Eb1","H2-DMa", "H2-DMb1", "H2-T23"))
dev.off()


##################################################################################################################################################################################################################

top_markers = read.table(file = "all.ge.tsv", sep = "\t")

pbmc <- NormalizeData(Lgr5Cre_Setdb1KO)

pbmc <- ScaleData(pbmc, features = c("H2-K1", "H2-D1", "H2-Aa", "H2-Ab1", "H2-Eb1","H2-DMa", "H2-DMb1", "H2-T23"))

pbmc <- RunPCA(pbmc, features = c("H2-K1", "H2-D1", "H2-Aa", "H2-Ab1", "H2-Eb1","H2-DMa", "H2-DMb1", "H2-T23"))

# Examine and visualize PCA results a few different ways
print(pbmc[["pca"]], dims = 1:5, nfeatures = 5)

DimHeatmap(pbmc, dims = 1:5, cells = 500, balanced = TRUE)
# NOTE: This process can take a long time for big datasets, comment out for expediency. More
# approximate techniques such as those implemented in ElbowPlot() can be used to reduce
# computation time
pbmc <- JackStraw(pbmc, num.replicate = 100)
pbmc <- ScoreJackStraw(pbmc, dims = 1:5)

ElbowPlot(pbmc)

pbmc <- FindNeighbors(pbmc, dims = 1:5)
pbmc <- FindClusters(pbmc, resolution = 0.5)

pbmc <- RunUMAP(pbmc, dims = 1:5)


# note that you can set `label = TRUE` or use the LabelClusters function to help label
# individual clusters
pdf("bla.pdf", width = 14, height = 10)
DimPlot(pbmc, reduction = "umap")
dev.off()










top_markers = read.table(file = "all.ge.tsv", sep = "\t")

pbmc <- NormalizeData(Lgr5Cre_Setdb1KO)

pbmc <- ScaleData(Lgr5Cre_MERGED, features = c("Cd74","H2-Aa","H2-Eb1","H2-Ab1","Bex1","Ceacam10","Prap1","Gkn3","Cyba","H2-DMa","H2-DMb1","Tspan1","H2-D1","Psmb8","Pglyrp1","Gm5485","Reg3g","H2-K1","Dhrs4","Hmgcs2","Krt18","Stmn1","Tmsb10","Krt8","Jaml","Gpx2","Onecut2","Clca3b","Cda","Ttr","Mgam","Tceal9","Tubb5","AW112010","Anxa2","Fabp2","S100a11","B2m","Ckb","Reg3b","Fabp1","Bex3","Krt7","Prss32","Cd9","Fgfbp1","Acaa2","Muc13","2200002D01Rik","Acot1","Pdgfa","H2-T23","Defa22","Defa21","Galk1","Hmgb2","Psmb9","2210407C18Rik"))

pbmc <- RunPCA(pbmc, features = c("Cd74","H2-Aa","H2-Eb1","H2-Ab1","Bex1","Ceacam10","Prap1","Gkn3","Cyba","H2-DMa","H2-DMb1","Tspan1","H2-D1","Psmb8","Pglyrp1","Gm5485","Reg3g","H2-K1","Dhrs4","Hmgcs2","Krt18","Stmn1","Tmsb10","Krt8","Jaml","Gpx2","Onecut2","Clca3b","Cda","Ttr","Mgam","Tceal9","Tubb5","AW112010","Anxa2","Fabp2","S100a11","B2m","Ckb","Reg3b","Fabp1","Bex3","Krt7","Prss32","Cd9","Fgfbp1","Acaa2","Muc13","2200002D01Rik","Acot1","Pdgfa","H2-T23","Defa22","Defa21","Galk1","Hmgb2","Psmb9","2210407C18Rik"))

# Examine and visualize PCA results a few different ways
print(pbmc[["pca"]], dims = 1:5, nfeatures = 5)

DimHeatmap(pbmc, dims = 1:5, cells = 500, balanced = TRUE)
# NOTE: This process can take a long time for big datasets, comment out for expediency. More
# approximate techniques such as those implemented in ElbowPlot() can be used to reduce
# computation time
pbmc <- JackStraw(pbmc, num.replicate = 100)
pbmc <- ScoreJackStraw(pbmc, dims = 1:20)

ElbowPlot(pbmc)

pbmc <- FindNeighbors(pbmc, dims = 1:10)
pbmc <- FindClusters(pbmc, resolution = 0.5)

pbmc <- RunUMAP(pbmc, dims = 1:10)


# note that you can set `label = TRUE` or use the LabelClusters function to help label
# individual clusters
pdf("bla.pdf", width = 14, height = 10)
DimPlot(pbmc, reduction = "umap")
dev.off()



# Umap plot merged
pdf("umapPlot_Lgr5Cre_merged.pdf", width=10, height=8)
DimPlot(pbmc, reduction = "umap", group.by = "orig.ident")
dev.off()

# Split objects 
SplitObject(pbmc, split.by = "ident")
n_cells=(FetchData(pbmc, var=c("ident", "orig.ident")) %>% dplyr::count(ident, orig.ident) %>% tidyr::spread(ident, n))

# Umap plot merged replicates per condition
pdf("umapPlot_Lgr5Cre_conditions.pdf", width=12, height=6)
DimPlot(pbmc,label=TRUE, split.by="orig.ident") + NoLegend()
dev.off()



pdf("Enterocyte_Immature Markers.pdf", width=15, height=8)
p =  DotPlot(pbmc,features = c("Reg3g", "Gsdmc4", "Prss32", "Krt8"),cols = c("blue","orange"))
p + ggtitle("Enterocyte Immature Markers") + RotatedAxis()
dev.off()

pdf("Enterocyte_Mature Markers.pdf", width=15, height=8)
p = DotPlot(pbmc,features = c("Elf3","Sis","Fabp1","Hnf4aos","Hnf4a", "Hnf4g", "Tmigd1","Fabp6","Slc51b","Slc51a","Mep1a","Fam151a","Naaladl1","Slc34a2","Plb1","Nudt4","Dpep1","Pmp22","Xpnpep2","Muc3","Neu1","Clec2h","Phgr1","Prss30","Aldob","Alpi","Apoa1","Apoa4","Lct"),cols = c("blue","orange")) + RotatedAxis()
p + ggtitle("Enterocyte Mature Markers")
dev.off()

pdf("Enterocyte Progenitor Markers.pdf", width=15, height=8)
p = DotPlot(pbmc,features = c("Ccnb1","Cdc20","Cenpa","Cdkn3","Cdc25c","Ccnb2","Kif22","Ube2c","Sapcd2","Rbp7","Ccna2","Aurka","Cdkn2d","Kif23","Nek2","Birc5","Plk1","Tacc3","Melk","Cps1"),cols = c("blue","orange")) + RotatedAxis()
p + ggtitle("Enterocyte Progenitor Markers")
dev.off()

pdf("Goblet Markers.pdf", width=15, height=8)
p = DotPlot(pbmc,features = c("Muc2","Spdef","Foxa1","Agr2","Spink4","Fcgbp","Tff3","Zg16","Clca1","Ccl6","Klk1","Tpsg1","Ccl9","Txndc5","Tspan13","Atoh1","Lrrc26","Clca3a1","Klf4"),cols = c("blue","orange")) + RotatedAxis()
p + ggtitle("Goblet Markers")
dev.off()

pdf("Paneth Markers.pdf", width=15, height=8)
p = DotPlot(pbmc,features = c("Lyz1","Mmp7","Dll4","Sox9","Gfi1","Gm14851","Defa21","Defa22","Defa17","Defa24","Defa3","Mptx2","Ang4"),cols = c("blue","orange")) + RotatedAxis()
# Gene Gm15284 & Defa-rs1 excluded as there are not in the dataset 
p + ggtitle("Paneth Markers")
dev.off()

pdf("Enteroendocrine Markers.pdf", width=15, height=8)
p = DotPlot(pbmc,features = c("Gfi1","Neurog3","Neurod1","Chga","Chgb","Isl1","Arx","Pax6","Foxa2","Sst","Gck","Gcg","Tph1","Pyy","Gfra3","Cpe","Tac1","Fam183b", "Hmgn3","Cck","Fev","Gch1","Pcsk1n", "Bex2","Vwa5b2","Nkx2-2","Marcksl1","Neurod2","Insm1"),cols = c("blue","orange")) + RotatedAxis()
# Gene Ngfrap1 excluded. It can not be found in the dataset
p + ggtitle("Enteroendocrine Markers")
dev.off()

pdf("Stem Markers.pdf", width=15, height=8)
p = DotPlot(pbmc,features = c("Lgr5","Ascl2","Olfm4","Prom1","Axin2","Fzd2","Fzd7","Lrp5","Lrp6","Notch1","Hes1","Smo","Yap1","Igfbp4","Bex1","Gkn3","Slc12a2"),cols = c("blue","orange")) + RotatedAxis()
p + ggtitle("Stem Markers")
dev.off()

pdf("Tuft Markers.pdf", width=15, height=8)
p = DotPlot(pbmc,features = c("Dclk1","Ptprc","Avil","Lrmp","Alox5ap","Rgs13","Sh2d6","Ltc4s","Hck","Cd24a","Trpm5","Kctd12","Aldh2","Il13ra1","Gng13","Tmem176a","Skap2","Ptpn6","Ly6g6f","Fyb","Adh1","Gfi1b","Il25"),cols = c("blue","orange")) + RotatedAxis()
p + ggtitle("Tuft Markers")
dev.off()

pdf("TA Markers.pdf", width=15, height=8)
p = DotPlot(pbmc,features = c("Stmn1", "Tubb5"),cols = c("blue","orange")) + RotatedAxis()
p + ggtitle("TA Markers")
dev.off()

pdf("Reserved Stem Markers.pdf", width=15, height=8)
p = DotPlot(pbmc,features = c("Lrig1", "Bmi1", "Hopx"),cols = c("blue","orange")) + RotatedAxis()
p + ggtitle("Reserved Stem Markers")
dev.off()

pdf("Necroptosis Markers.pdf", width=15, height=8)
p = DotPlot(pbmc,features = c("Zbp1", "Ripk1", "Ripk3", "Cxcl1", "Ccl20", "Tnf", "Csf1" ),cols = c("blue","orange")) + RotatedAxis()
p + ggtitle("Necroptosis Markers")
dev.off()

pdf("Lgr5 Marker.pdf", width=15, height=8)
p = DotPlot(Lgr5Cre_MERGED,features = c("Lgr5" ),cols = c("blue","orange")) + RotatedAxis()
p + ggtitle("Lgr5 Marker")
dev.off()

pdf("GFP Marker.pdf", width=15, height=8)
p = DotPlot(pbmc,features = c("GFP" ), cols = c("blue","orange")) + RotatedAxis()
p + ggtitle("GFP Marker")
dev.off()

pdf("Nature paper Markers.pdf", width=15, height=8)
p = DotPlot(Lgr5Cre_MERGED,features = c("Mbl2","Ptprs","C4bp","Icam1","Ptpn22","Syk","Shmt2","Zfp809","Trim35","Bst2","Ltf","Mx1","Pml","Trim6","Adar","Mx2","S100a14","Gbp3","Ifitm3","Rnf135","Tmem173","Isg20","Jak3","Stat2","Oas2","Aim2","Oas1b","Dhx58","Oas1a","Eif2ak2","Zc3hav1","Ereg","Parp14","Zbp1","Cxcl16","Oasl2","Ddx58","Trim25","Rnf125","Vnn1","Pvr","Gbp4","Gbp10","Oasl1","Gbp8","Trim15","Cd55","Oas3","Isg15","Irf7","Trim12c","Ifit2","Ifit3","Trim30a","Nos2"), cols = c("blue","orange")) + RotatedAxis()
p + ggtitle("Nature Paper Markers")
dev.off()


pdf("Nebulosa_H2_Genessss.pdf", width = 14, height = 12)
plot_density(Lgr5Cre_0.1_Renamed_WT,c("H2-K1", "H2-D1", "H2-Aa", "H2-Ab1", "H2-Eb1","H2-DMa", "H2-DMb1", "H2-T23"))
dev.off()

